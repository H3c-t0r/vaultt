### ***
### WARNING: DO NOT manually EDIT or MERGE this file, it is generated by 'make ci-config'.
### INSTEAD: Edit or merge the source in config/ then run 'make ci-config'.
### ***
# Orb 'circleci/slack@3.2.0' resolved to 'circleci/slack@3.2.0'
version: 2
jobs:
  bundle-releases:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    steps:
    - checkout
    - run:
        command: make -C packages*.lock write-all-package-cache-keys
        name: Write all package cache keys
    - restore_cache:
        key: cache006-package-8dab6563337efbae083d6506070531ba8d60a00a-{{checksum ".buildcache/cache-keys/package-8dab6563337efbae083d6506070531ba8d60a00a"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 8dab6563337efbae083d6506070531ba8d60a00a
        name: Write package metadata for darwin_386_package
    - restore_cache:
        key: cache006-package-b168b39a60e04bc61fb04bc5769f1e73f11672d5-{{checksum ".buildcache/cache-keys/package-b168b39a60e04bc61fb04bc5769f1e73f11672d5"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: b168b39a60e04bc61fb04bc5769f1e73f11672d5
        name: Write package metadata for darwin_amd64_package
    - restore_cache:
        key: cache006-package-6787b0cdac44e8c4a5b5e17557f1d594d64b43e0-{{checksum ".buildcache/cache-keys/package-6787b0cdac44e8c4a5b5e17557f1d594d64b43e0"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 6787b0cdac44e8c4a5b5e17557f1d594d64b43e0
        name: Write package metadata for freebsd_386_package
    - restore_cache:
        key: cache006-package-57691f7fb47d56b184a52f05916aa77423f90892-{{checksum ".buildcache/cache-keys/package-57691f7fb47d56b184a52f05916aa77423f90892"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 57691f7fb47d56b184a52f05916aa77423f90892
        name: Write package metadata for freebsd_amd64_package
    - restore_cache:
        key: cache006-package-6d4c1bb1f543d760e07fea30a68691e887e8f1dd-{{checksum ".buildcache/cache-keys/package-6d4c1bb1f543d760e07fea30a68691e887e8f1dd"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 6d4c1bb1f543d760e07fea30a68691e887e8f1dd
        name: Write package metadata for freebsd_arm_package
    - restore_cache:
        key: cache006-package-460a653156e2cf5357cd8822a436d084f45de864-{{checksum ".buildcache/cache-keys/package-460a653156e2cf5357cd8822a436d084f45de864"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 460a653156e2cf5357cd8822a436d084f45de864
        name: Write package metadata for linux_386_package
    - restore_cache:
        key: cache006-package-19e6736ac888a3b2ec8c1838ad61ca1c137e5003-{{checksum ".buildcache/cache-keys/package-19e6736ac888a3b2ec8c1838ad61ca1c137e5003"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 19e6736ac888a3b2ec8c1838ad61ca1c137e5003
        name: Write package metadata for linux_amd64_package
    - restore_cache:
        key: cache006-package-d094813728a1baea822b732b75add0b5be832313-{{checksum ".buildcache/cache-keys/package-d094813728a1baea822b732b75add0b5be832313"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: d094813728a1baea822b732b75add0b5be832313
        name: Write package metadata for linux_arm_package
    - restore_cache:
        key: cache006-package-55bb926a6afd1d74079519a2cff92ac2d776b1d8-{{checksum ".buildcache/cache-keys/package-55bb926a6afd1d74079519a2cff92ac2d776b1d8"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 55bb926a6afd1d74079519a2cff92ac2d776b1d8
        name: Write package metadata for linux_arm64_package
    - restore_cache:
        key: cache006-package-a653448b53b3b51b9335f95dea72bfb207539cf2-{{checksum ".buildcache/cache-keys/package-a653448b53b3b51b9335f95dea72bfb207539cf2"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: a653448b53b3b51b9335f95dea72bfb207539cf2
        name: Write package metadata for netbsd_386_package
    - restore_cache:
        key: cache006-package-31945922764a1c74d6b5fd184de0dee4b2a37e69-{{checksum ".buildcache/cache-keys/package-31945922764a1c74d6b5fd184de0dee4b2a37e69"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 31945922764a1c74d6b5fd184de0dee4b2a37e69
        name: Write package metadata for netbsd_amd64_package
    - restore_cache:
        key: cache006-package-e8b2fee0f071585941c5f549ff7fb9fd2c2e3825-{{checksum ".buildcache/cache-keys/package-e8b2fee0f071585941c5f549ff7fb9fd2c2e3825"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: e8b2fee0f071585941c5f549ff7fb9fd2c2e3825
        name: Write package metadata for openbsd_386_package
    - restore_cache:
        key: cache006-package-d36cd264d651ec8fe646c3494c2b28bec1274450-{{checksum ".buildcache/cache-keys/package-d36cd264d651ec8fe646c3494c2b28bec1274450"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: d36cd264d651ec8fe646c3494c2b28bec1274450
        name: Write package metadata for openbsd_amd64_package
    - restore_cache:
        key: cache006-package-1c75afa38740f1e706cdf4d8fee9a59166fc9e8f-{{checksum ".buildcache/cache-keys/package-1c75afa38740f1e706cdf4d8fee9a59166fc9e8f"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 1c75afa38740f1e706cdf4d8fee9a59166fc9e8f
        name: Write package metadata for solaris_amd64_package
    - restore_cache:
        key: cache006-package-a9dc544759833cc8ef096fb72819bda56df669d3-{{checksum ".buildcache/cache-keys/package-a9dc544759833cc8ef096fb72819bda56df669d3"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: a9dc544759833cc8ef096fb72819bda56df669d3
        name: Write package metadata for windows_386_package
    - restore_cache:
        key: cache006-package-5251d88e8d819c1af5e3086c5ee6d5691984f4bb-{{checksum ".buildcache/cache-keys/package-5251d88e8d819c1af5e3086c5ee6d5691984f4bb"}}
    - run:
        command: |
          make package-meta
        environment:
          PACKAGE_SPEC_ID: 5251d88e8d819c1af5e3086c5ee6d5691984f4bb
        name: Write package metadata for windows_amd64_package
    - run:
        command: make aliases
        name: Write package aliases
    - run:
        command: ls -lahR .buildcache
        name: List Build Cache
    - run:
        command: cp packages*.lock/pkgs.yml lockfile-standalone.yml
    - store_artifacts:
        destination: lockfile-standalone.yml
        path: lockfile-standalone.yml
    - store_artifacts:
        destination: packages-standalone
        path: .buildcache/packages
    - run:
        command: tar -czf packages-standalone.tar.gz .buildcache/packages lockfile-standalone.yml
    - store_artifacts:
        destination: packages-standalone.tar.gz
        path: packages-standalone.tar.gz
    - run:
        command: tar -czf meta-standalone.tar.gz .buildcache/packages/store/*.json lockfile-standalone.yml
    - store_artifacts:
        destination: meta-standalone.tar.gz
        path: meta-standalone.tar.gz
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
  darwin_amd64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: b168b39a60e04bc61fb04bc5769f1e73f11672d5
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-b168b39a60e04bc61fb04bc5769f1e73f11672d5-{{checksum ".buildcache/cache-keys/package-b168b39a60e04bc61fb04bc5769f1e73f11672d5"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_8949_{{checksum ".buildcache/cache-keys/copy-source-89499358c51a9c33317060748e17b8bbd2e1c9ad"}}
        - cache006-warm-go-build-vendor-cache_6e42_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-6e42f890ba16e79057b483ee075be92b88003a86"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-b168b39a60e04bc61fb04bc5769f1e73f11672d5-{{checksum ".buildcache/cache-keys/package-b168b39a60e04bc61fb04bc5769f1e73f11672d5"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-6e42f890ba16e79057b483ee075be92b88003a86.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-6e42f890ba16e79057b483ee075be92b88003a86-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_6e42_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-6e42f890ba16e79057b483ee075be92b88003a86"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-6e42f890ba16e79057b483ee075be92b88003a86.tar.gz
  windows_386_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: a9dc544759833cc8ef096fb72819bda56df669d3
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-a9dc544759833cc8ef096fb72819bda56df669d3-{{checksum ".buildcache/cache-keys/package-a9dc544759833cc8ef096fb72819bda56df669d3"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_56b4_{{checksum ".buildcache/cache-keys/copy-source-56b4fcded8ff8f2b1c5add5d77bd1586953202cb"}}
        - cache006-warm-go-build-vendor-cache_a688_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-a6880af013bb8f579cc33ac5ea020eab1db0597e"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-a9dc544759833cc8ef096fb72819bda56df669d3-{{checksum ".buildcache/cache-keys/package-a9dc544759833cc8ef096fb72819bda56df669d3"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-a6880af013bb8f579cc33ac5ea020eab1db0597e.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-a6880af013bb8f579cc33ac5ea020eab1db0597e-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_a688_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-a6880af013bb8f579cc33ac5ea020eab1db0597e"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-a6880af013bb8f579cc33ac5ea020eab1db0597e.tar.gz
  install-ui-dependencies:
    docker:
    - image: node:10-buster
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /go/src/github.com/hashicorp/vault
    steps:
    - checkout
    - restore_cache:
        key: yarn-lock-v6-{{ checksum "ui/yarn.lock" }}
    - run:
        command: |
          cd ui
          yarn install
          npm rebuild node-sass
        name: Install UI dependencies
    - save_cache:
        key: yarn-lock-v6-{{ checksum "ui/yarn.lock" }}
        paths:
        - ui/node_modules
  build-common-layers:
    machine:
      image: ubuntu-1604:202007-01
    resource_class: xlarge
    shell: /usr/bin/env bash -euo pipefail -c
    steps:
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build image cache
    - run:
        command: |
          if [ -f .buildcache/archives/06-build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab.tar.gz ]; then
            echo "Exact match found in cache, skipping build."
            circleci-agent step halt
          else
            echo "No exact match found, proceeding with build."
          fi
        name: Finish early if loaded exact match from cache.
    - run:
        command: |
          LAYER_SPEC_ID=06-build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -f packages*.lock/layer.mk 00-base-cd50335c2217aa98d45d50d7ef941dfd1289b070-image
        name: Build base layer
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -f packages*.lock/layer.mk 01-install-go-5930dc1372dd850c52023131f54400cf580fc2fc-image
        name: Build install-go layer
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -f packages*.lock/layer.mk 02-install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9-image
        name: Build install-go-tools layer
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -f packages*.lock/layer.mk 03-set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814-image
        name: Build set-workdir layer
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -f packages*.lock/layer.mk 04-install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8-image
        name: Build install-yarn layer
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -f packages*.lock/layer.mk 05-ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd-image
        name: Build ui-dependencies layer
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -f packages*.lock/layer.mk 06-build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab-image
        name: Build build-ui layer
    - run:
        command: make -f packages*.lock/layer.mk 06-build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab-save
        name: Export builder image
    - save_cache:
        key: cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        name: Save layer build-ui to cache.
        paths:
        - .buildcache/archives/06-build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab.tar.gz
    - run:
        command: mv .buildcache/archives/06-build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab.tar.gz .buildcache/archives/05-ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd.tar.gz
        name: Prepare layer ui-dependencies for caching
    - save_cache:
        key: cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        name: Save layer ui-dependencies to cache.
        paths:
        - .buildcache/archives/05-ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd.tar.gz
    - run:
        command: mv .buildcache/archives/05-ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd.tar.gz .buildcache/archives/04-install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8.tar.gz
        name: Prepare layer install-yarn for caching
    - save_cache:
        key: cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        name: Save layer install-yarn to cache.
        paths:
        - .buildcache/archives/04-install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8.tar.gz
    - run:
        command: mv .buildcache/archives/04-install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8.tar.gz .buildcache/archives/03-set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814.tar.gz
        name: Prepare layer set-workdir for caching
    - save_cache:
        key: cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        name: Save layer set-workdir to cache.
        paths:
        - .buildcache/archives/03-set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814.tar.gz
    - run:
        command: mv .buildcache/archives/03-set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814.tar.gz .buildcache/archives/02-install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9.tar.gz
        name: Prepare layer install-go-tools for caching
    - save_cache:
        key: cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        name: Save layer install-go-tools to cache.
        paths:
        - .buildcache/archives/02-install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9.tar.gz
    - run:
        command: mv .buildcache/archives/02-install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9.tar.gz .buildcache/archives/01-install-go-5930dc1372dd850c52023131f54400cf580fc2fc.tar.gz
        name: Prepare layer install-go for caching
    - save_cache:
        key: cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        name: Save layer install-go to cache.
        paths:
        - .buildcache/archives/01-install-go-5930dc1372dd850c52023131f54400cf580fc2fc.tar.gz
    - run:
        command: mv .buildcache/archives/01-install-go-5930dc1372dd850c52023131f54400cf580fc2fc.tar.gz .buildcache/archives/00-base-cd50335c2217aa98d45d50d7ef941dfd1289b070.tar.gz
        name: Prepare layer base for caching
    - save_cache:
        key: cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Save layer base to cache.
        paths:
        - .buildcache/archives/00-base-cd50335c2217aa98d45d50d7ef941dfd1289b070.tar.gz
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
  linux_arm64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 55bb926a6afd1d74079519a2cff92ac2d776b1d8
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-55bb926a6afd1d74079519a2cff92ac2d776b1d8-{{checksum ".buildcache/cache-keys/package-55bb926a6afd1d74079519a2cff92ac2d776b1d8"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_0ee9_{{checksum ".buildcache/cache-keys/copy-source-0ee900581e504825d238f242fc6048e38c12d9a8"}}
        - cache006-warm-go-build-vendor-cache_ee17_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-ee177f96899b87e8403f1adae55f80e259a36e2c"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-55bb926a6afd1d74079519a2cff92ac2d776b1d8-{{checksum ".buildcache/cache-keys/package-55bb926a6afd1d74079519a2cff92ac2d776b1d8"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-ee177f96899b87e8403f1adae55f80e259a36e2c.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-ee177f96899b87e8403f1adae55f80e259a36e2c-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_ee17_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-ee177f96899b87e8403f1adae55f80e259a36e2c"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-ee177f96899b87e8403f1adae55f80e259a36e2c.tar.gz
  test-ui:
    docker:
    - image: node:10-buster
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /go/src/github.com/hashicorp/vault
    resource_class: medium+
    steps:
    - checkout
    - restore_cache:
        key: yarn-lock-v6-{{ checksum "ui/yarn.lock" }}
    - attach_workspace:
        at: .
    - run:
        command: |
          set -x

          # Install Chrome
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub \
            | apt-key add -
          echo "deb http://dl.google.com/linux/chrome/deb/ stable main" \
            | tee /etc/apt/sources.list.d/google-chrome.list
          apt-get update
          apt-get -y install google-chrome-stable
          rm /etc/apt/sources.list.d/google-chrome.list
          rm -rf /var/lib/apt/lists/* /var/cache/apt/*

          # Add ./bin to the PATH so vault binary can be run by Ember tests
          export PATH="${PWD}/bin:${PATH}"

          # Run Ember tests
          cd ui
          mkdir -p test-results/qunit
          yarn test:oss
        name: Test UI
    - store_artifacts:
        path: ui/test-results
    - store_test_results:
        path: ui/test-results
  linux_arm_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: d094813728a1baea822b732b75add0b5be832313
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-d094813728a1baea822b732b75add0b5be832313-{{checksum ".buildcache/cache-keys/package-d094813728a1baea822b732b75add0b5be832313"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_1cee_{{checksum ".buildcache/cache-keys/copy-source-1ceeff19e616507c1735b7bfa2b5695042cf94be"}}
        - cache006-warm-go-build-vendor-cache_0b15_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-0b153ca8c99dbe0768e298da203850249d2c3edd"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-d094813728a1baea822b732b75add0b5be832313-{{checksum ".buildcache/cache-keys/package-d094813728a1baea822b732b75add0b5be832313"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-0b153ca8c99dbe0768e298da203850249d2c3edd.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-0b153ca8c99dbe0768e298da203850249d2c3edd-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_0b15_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-0b153ca8c99dbe0768e298da203850249d2c3edd"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-0b153ca8c99dbe0768e298da203850249d2c3edd.tar.gz
  test-ui-browserstack:
    docker:
    - image: node:10-buster
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /go/src/github.com/hashicorp/vault
    resource_class: medium+
    steps:
    - checkout
    - restore_cache:
        key: yarn-lock-v6-{{ checksum "ui/yarn.lock" }}
    - attach_workspace:
        at: .
    - run:
        command: |
          # Add ./bin to the PATH so vault binary can be found.
          export PATH="${PWD}"/bin:${PATH}
          make test-ui-browserstack
        name: Run Browserstack Tests
  darwin_386_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 8dab6563337efbae083d6506070531ba8d60a00a
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-8dab6563337efbae083d6506070531ba8d60a00a-{{checksum ".buildcache/cache-keys/package-8dab6563337efbae083d6506070531ba8d60a00a"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_b34b_{{checksum ".buildcache/cache-keys/copy-source-b34b4bbf150073209a7291ec5b06b40588f7afff"}}
        - cache006-warm-go-build-vendor-cache_a5ae_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-a5aeaccdcefd75ed4702e78424b011a1ea1341d7"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-8dab6563337efbae083d6506070531ba8d60a00a-{{checksum ".buildcache/cache-keys/package-8dab6563337efbae083d6506070531ba8d60a00a"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-a5aeaccdcefd75ed4702e78424b011a1ea1341d7.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-a5aeaccdcefd75ed4702e78424b011a1ea1341d7-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_a5ae_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-a5aeaccdcefd75ed4702e78424b011a1ea1341d7"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-a5aeaccdcefd75ed4702e78424b011a1ea1341d7.tar.gz
  build-go-dev:
    machine: true
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /go/src/github.com/hashicorp/vault
    steps:
    - run:
        command: |
          [ -n "$GO_VERSION" ] || { echo "You must set GO_VERSION"; exit 1; }
          # Install Go
          curl -sSLO "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz"
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz"
          rm -f "go${GO_VERSION}.linux-amd64.tar.gz"
          GOPATH="/go"
          mkdir $GOPATH 2>/dev/null || { sudo mkdir $GOPATH && sudo chmod 777 $GOPATH; }
          echo "export GOPATH='$GOPATH'" >> "$BASH_ENV"
          echo "export PATH='$PATH:$GOPATH/bin:/usr/local/go/bin'" >> "$BASH_ENV"

          echo "$ go version"
          go version
        name: Setup Go
        working_directory: ~/
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: |
          # Move dev UI assets to expected location
          rm -rf ./pkg
          mkdir ./pkg

          # Build dev binary
          make ci-bootstrap dev
        name: Build dev binary
    - persist_to_workspace:
        paths:
        - bin
        root: .
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO_VERSION: 1.15.3
    - GO111MODULE: 'off'
    - GOTESTSUM_VERSION: 0.5.2
  algolia-index:
    docker:
    - image: node:12
    steps:
    - checkout
    - run:
        command: |
          if  [ "$CIRCLE_REPOSITORY_URL" != "git@github.com:hashicorp/vault.git" ]; then
            echo "Not Vault OSS Repo, not indexing Algolia"
            exit 0
          fi
          cd website/
          npm install
          node scripts/index_search_content.js
        name: Push content to Algolia Index
  linux_386_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 460a653156e2cf5357cd8822a436d084f45de864
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-460a653156e2cf5357cd8822a436d084f45de864-{{checksum ".buildcache/cache-keys/package-460a653156e2cf5357cd8822a436d084f45de864"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_43e9_{{checksum ".buildcache/cache-keys/copy-source-43e92d7d36b6626653177298e39adffbd405b421"}}
        - cache006-warm-go-build-vendor-cache_760c_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-760cd45f95dcdbec5318705331a0aedf6f0b813b"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-460a653156e2cf5357cd8822a436d084f45de864-{{checksum ".buildcache/cache-keys/package-460a653156e2cf5357cd8822a436d084f45de864"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-760cd45f95dcdbec5318705331a0aedf6f0b813b.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-760cd45f95dcdbec5318705331a0aedf6f0b813b-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_760c_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-760cd45f95dcdbec5318705331a0aedf6f0b813b"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-760cd45f95dcdbec5318705331a0aedf6f0b813b.tar.gz
  test-go-remote-docker:
    docker:
    - image: circleci/golang:1.14.7-stretch
    resource_class: large
    working_directory: /go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
        version: 18.09.3
    - run:
        command: |
          TZ=GMT date '+%Y%m%d' > /tmp/go-cache-key
        name: Compute test cache key
    - restore_cache:
        keys:
        - go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
    - run:
        command: |
          set -x

          case "" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0
          USE_DOCKER=1

          # Split Go tests by prior test times.  If use_docker is true, only run
          # tests that depend on docker, otherwise only those that don't.
          if [ $USE_DOCKER == 1 ]; then
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          else
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          fi

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi

            # Start a docker testcontainer to run the tests in
            docker run -d -e TEST_DOCKER_NETWORK_ID \
              -e DOCKER_CERT_PATH -e DOCKER_HOST -e DOCKER_MACHINE_NAME -e DOCKER_TLS_VERIFY -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer circleci/golang:1.14.7-stretch \
              tail -f /dev/null

            # Run tests
            test -d /tmp/go-cache && docker cp /tmp/go-cache testcontainer:/tmp/gocache
            docker exec testcontainer sh -c 'mkdir -p /go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            docker exec -w /go/src/github.com/hashicorp/vault/ \
              -e GO111MODULE -e CIRCLECI -e GOCACHE=/tmp/gocache -e VAULT_CI_GO_TEST_RACE \
              testcontainer \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${package_names}
          else
            GOCACHE=/tmp/go-cache \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${package_names}
          fi
        name: Run Go tests
        no_output_timeout: 60m
    - run:
        command: |
          docker cp testcontainer:/go/src/github.com/hashicorp/vault/test-results .
          docker cp testcontainer:/tmp/gocache /tmp/go-cache
        name: Copy test results
        when: always
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO111MODULE: 'off'
  freebsd_386_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 6787b0cdac44e8c4a5b5e17557f1d594d64b43e0
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-6787b0cdac44e8c4a5b5e17557f1d594d64b43e0-{{checksum ".buildcache/cache-keys/package-6787b0cdac44e8c4a5b5e17557f1d594d64b43e0"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_2d94_{{checksum ".buildcache/cache-keys/copy-source-2d94fd91b1d15153b3b921536947b046e9003747"}}
        - cache006-warm-go-build-vendor-cache_2829_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-282990ba92770ec199d835955fbceb18fbb4319c"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-6787b0cdac44e8c4a5b5e17557f1d594d64b43e0-{{checksum ".buildcache/cache-keys/package-6787b0cdac44e8c4a5b5e17557f1d594d64b43e0"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-282990ba92770ec199d835955fbceb18fbb4319c.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-282990ba92770ec199d835955fbceb18fbb4319c-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_2829_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-282990ba92770ec199d835955fbceb18fbb4319c"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-282990ba92770ec199d835955fbceb18fbb4319c.tar.gz
  test-go-race:
    docker:
    - image: circleci/golang:1.15.3-stretch
    resource_class: xlarge
    working_directory: /go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - run:
        command: |
          TZ=GMT date '+%Y%m%d' > /tmp/go-cache-key
        name: Compute test cache key
    - restore_cache:
        keys:
        - go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
    - run:
        command: |
          set -x

          case "-race" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0

          # Split Go tests by prior test times.  If use_docker is true, only run
          # tests that depend on docker, otherwise only those that don't.
          if [ $USE_DOCKER == 1 ]; then
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          else
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          fi

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi

            # Start a docker testcontainer to run the tests in
            docker run -d -e TEST_DOCKER_NETWORK_ID \
              -e DOCKER_CERT_PATH -e DOCKER_HOST -e DOCKER_MACHINE_NAME -e DOCKER_TLS_VERIFY -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer circleci/golang:1.14.7-stretch \
              tail -f /dev/null

            # Run tests
            test -d /tmp/go-cache && docker cp /tmp/go-cache testcontainer:/tmp/gocache
            docker exec testcontainer sh -c 'mkdir -p /go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            docker exec -w /go/src/github.com/hashicorp/vault/ \
              -e GO111MODULE -e CIRCLECI -e GOCACHE=/tmp/gocache -e VAULT_CI_GO_TEST_RACE \
              testcontainer \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                -race \
                ${package_names}
          else
            GOCACHE=/tmp/go-cache \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                -race \
                ${package_names}
          fi
        name: Run Go tests
        no_output_timeout: 60m
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO111MODULE: 'off'
  freebsd_amd64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 57691f7fb47d56b184a52f05916aa77423f90892
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-57691f7fb47d56b184a52f05916aa77423f90892-{{checksum ".buildcache/cache-keys/package-57691f7fb47d56b184a52f05916aa77423f90892"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_4bd4_{{checksum ".buildcache/cache-keys/copy-source-4bd46cde42512c58b661d4e28d81b20cc7256a64"}}
        - cache006-warm-go-build-vendor-cache_01eb_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-01eb738d113fde4b24a9590821862f106b9eba9c"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-57691f7fb47d56b184a52f05916aa77423f90892-{{checksum ".buildcache/cache-keys/package-57691f7fb47d56b184a52f05916aa77423f90892"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-01eb738d113fde4b24a9590821862f106b9eba9c.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-01eb738d113fde4b24a9590821862f106b9eba9c-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_01eb_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-01eb738d113fde4b24a9590821862f106b9eba9c"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-01eb738d113fde4b24a9590821862f106b9eba9c.tar.gz
  openbsd_386_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: e8b2fee0f071585941c5f549ff7fb9fd2c2e3825
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-e8b2fee0f071585941c5f549ff7fb9fd2c2e3825-{{checksum ".buildcache/cache-keys/package-e8b2fee0f071585941c5f549ff7fb9fd2c2e3825"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_afa5_{{checksum ".buildcache/cache-keys/copy-source-afa5feb4a81d321a612b575f2f445b1782ac50c5"}}
        - cache006-warm-go-build-vendor-cache_2b81_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-2b81c09aabf36ba4806e97b3f5cd53acfcb5f03b"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-e8b2fee0f071585941c5f549ff7fb9fd2c2e3825-{{checksum ".buildcache/cache-keys/package-e8b2fee0f071585941c5f549ff7fb9fd2c2e3825"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-2b81c09aabf36ba4806e97b3f5cd53acfcb5f03b.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-2b81c09aabf36ba4806e97b3f5cd53acfcb5f03b-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_2b81_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-2b81c09aabf36ba4806e97b3f5cd53acfcb5f03b"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-2b81c09aabf36ba4806e97b3f5cd53acfcb5f03b.tar.gz
  linux_amd64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 19e6736ac888a3b2ec8c1838ad61ca1c137e5003
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-19e6736ac888a3b2ec8c1838ad61ca1c137e5003-{{checksum ".buildcache/cache-keys/package-19e6736ac888a3b2ec8c1838ad61ca1c137e5003"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_95da_{{checksum ".buildcache/cache-keys/copy-source-95da59d4306046b90b790089e83193e9a6df9fd6"}}
        - cache006-warm-go-build-vendor-cache_d91b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-d91b7e2ff4a0d632878b26727b4e7b6f24b42997"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-19e6736ac888a3b2ec8c1838ad61ca1c137e5003-{{checksum ".buildcache/cache-keys/package-19e6736ac888a3b2ec8c1838ad61ca1c137e5003"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-d91b7e2ff4a0d632878b26727b4e7b6f24b42997.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-d91b7e2ff4a0d632878b26727b4e7b6f24b42997-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_d91b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-d91b7e2ff4a0d632878b26727b4e7b6f24b42997"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-d91b7e2ff4a0d632878b26727b4e7b6f24b42997.tar.gz
  website-docker-image:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    steps:
    - checkout
    - setup_remote_docker
    - run:
        command: |
          IMAGE_TAG="$(git rev-list -n1 HEAD -- website/Dockerfile website/package-lock.json)"
          echo "Using $IMAGE_TAG"
          if  [ "$CIRCLE_REPOSITORY_URL" != "git@github.com:hashicorp/vault.git" ]; then
            echo "Not Vault OSS Repo, not building website docker image"
          elif curl https://hub.docker.com/v2/repositories/hashicorp/vault-website/tags/$IMAGE_TAG -fsL > /dev/null; then
              echo "Dependencies have not changed, not building a new website docker image."
          else
              cd website/
              docker build -t hashicorp/vault-website:$IMAGE_TAG .
              docker tag hashicorp/vault-website:$IMAGE_TAG hashicorp/vault-website:latest
              docker login -u $WEBSITE_DOCKER_USER -p $WEBSITE_DOCKER_PASS
              docker push hashicorp/vault-website
          fi
        name: Build Docker Image if Necessary
  solaris_amd64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 1c75afa38740f1e706cdf4d8fee9a59166fc9e8f
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-1c75afa38740f1e706cdf4d8fee9a59166fc9e8f-{{checksum ".buildcache/cache-keys/package-1c75afa38740f1e706cdf4d8fee9a59166fc9e8f"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_215d_{{checksum ".buildcache/cache-keys/copy-source-215dae7ebc04d0ac45cc8eb4ccfb39f1dec90ea0"}}
        - cache006-warm-go-build-vendor-cache_27c6_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-27c64188811d5b42afb14085b4142a7fb68b408d"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-1c75afa38740f1e706cdf4d8fee9a59166fc9e8f-{{checksum ".buildcache/cache-keys/package-1c75afa38740f1e706cdf4d8fee9a59166fc9e8f"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-27c64188811d5b42afb14085b4142a7fb68b408d.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-27c64188811d5b42afb14085b4142a7fb68b408d-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_27c6_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-27c64188811d5b42afb14085b4142a7fb68b408d"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-27c64188811d5b42afb14085b4142a7fb68b408d.tar.gz
  test-go:
    docker:
    - image: circleci/golang:1.15.3-stretch
    resource_class: xlarge
    working_directory: /go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - run:
        command: |
          TZ=GMT date '+%Y%m%d' > /tmp/go-cache-key
        name: Compute test cache key
    - restore_cache:
        keys:
        - go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
    - run:
        command: |
          set -x

          case "" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0

          # Split Go tests by prior test times.  If use_docker is true, only run
          # tests that depend on docker, otherwise only those that don't.
          if [ $USE_DOCKER == 1 ]; then
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          else
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          fi

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi

            # Start a docker testcontainer to run the tests in
            docker run -d -e TEST_DOCKER_NETWORK_ID \
              -e DOCKER_CERT_PATH -e DOCKER_HOST -e DOCKER_MACHINE_NAME -e DOCKER_TLS_VERIFY -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer circleci/golang:1.14.7-stretch \
              tail -f /dev/null

            # Run tests
            test -d /tmp/go-cache && docker cp /tmp/go-cache testcontainer:/tmp/gocache
            docker exec testcontainer sh -c 'mkdir -p /go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            docker exec -w /go/src/github.com/hashicorp/vault/ \
              -e GO111MODULE -e CIRCLECI -e GOCACHE=/tmp/gocache -e VAULT_CI_GO_TEST_RACE \
              testcontainer \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${package_names}
          else
            GOCACHE=/tmp/go-cache \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${package_names}
          fi
        name: Run Go tests
        no_output_timeout: 60m
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO111MODULE: 'off'
  test-go-nightly:
    machine: true
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /go/src/github.com/hashicorp/vault
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - run:
        command: |
          [ -n "$GO_VERSION" ] || { echo "You must set GO_VERSION"; exit 1; }
          # Install Go
          curl -sSLO "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz"
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz"
          rm -f "go${GO_VERSION}.linux-amd64.tar.gz"
          GOPATH="/go"
          mkdir $GOPATH 2>/dev/null || { sudo mkdir $GOPATH && sudo chmod 777 $GOPATH; }
          echo "export GOPATH='$GOPATH'" >> "$BASH_ENV"
          echo "export PATH='$PATH:$GOPATH/bin:/usr/local/go/bin'" >> "$BASH_ENV"

          echo "$ go version"
          go version
        name: Setup Go
        working_directory: ~/
    - checkout
    - run:
        command: |
          TZ=GMT date '+%Y%m%d' > /tmp/go-cache-key
        name: Compute test cache key
    - restore_cache:
        keys:
        - go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
    - run:
        command: |
          set -x

          case "" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0

          # Split Go tests by prior test times.  If use_docker is true, only run
          # tests that depend on docker, otherwise only those that don't.
          if [ $USE_DOCKER == 1 ]; then
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          else
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          fi

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi

            # Start a docker testcontainer to run the tests in
            docker run -d -e TEST_DOCKER_NETWORK_ID \
              -e DOCKER_CERT_PATH -e DOCKER_HOST -e DOCKER_MACHINE_NAME -e DOCKER_TLS_VERIFY -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer circleci/golang:1.14.7-stretch \
              tail -f /dev/null

            # Run tests
            test -d /tmp/go-cache && docker cp /tmp/go-cache testcontainer:/tmp/gocache
            docker exec testcontainer sh -c 'mkdir -p /go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            docker exec -w /go/src/github.com/hashicorp/vault/ \
              -e GO111MODULE -e CIRCLECI -e GOCACHE=/tmp/gocache -e VAULT_CI_GO_TEST_RACE \
              testcontainer \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${package_names}
          else
            GOCACHE=/tmp/go-cache \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${package_names}
          fi
        name: Run Go tests
        no_output_timeout: 60m
    - save_cache:
        key: go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
        paths:
        - /tmp/go-cache
        when: always
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO_VERSION: 1.15.3
    - GO111MODULE: 'off'
    - GOTESTSUM_VERSION: 0.5.2
  netbsd_amd64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 31945922764a1c74d6b5fd184de0dee4b2a37e69
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-31945922764a1c74d6b5fd184de0dee4b2a37e69-{{checksum ".buildcache/cache-keys/package-31945922764a1c74d6b5fd184de0dee4b2a37e69"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_63bf_{{checksum ".buildcache/cache-keys/copy-source-63bffc132b498bbb29801a383aedbe3fbf2db686"}}
        - cache006-warm-go-build-vendor-cache_de6a_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-de6ab3a9b673a36dc3cb38120ec1246c6f992440"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-31945922764a1c74d6b5fd184de0dee4b2a37e69-{{checksum ".buildcache/cache-keys/package-31945922764a1c74d6b5fd184de0dee4b2a37e69"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-de6ab3a9b673a36dc3cb38120ec1246c6f992440.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-de6ab3a9b673a36dc3cb38120ec1246c6f992440-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_de6a_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-de6ab3a9b673a36dc3cb38120ec1246c6f992440"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-de6ab3a9b673a36dc3cb38120ec1246c6f992440.tar.gz
  openbsd_amd64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: d36cd264d651ec8fe646c3494c2b28bec1274450
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-d36cd264d651ec8fe646c3494c2b28bec1274450-{{checksum ".buildcache/cache-keys/package-d36cd264d651ec8fe646c3494c2b28bec1274450"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_a6ba_{{checksum ".buildcache/cache-keys/copy-source-a6ba740283e691ef10521bf5da25c0fabd2bd066"}}
        - cache006-warm-go-build-vendor-cache_1b6f_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-1b6fda2804df1135a27deec1b79fdb8944654d14"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-d36cd264d651ec8fe646c3494c2b28bec1274450-{{checksum ".buildcache/cache-keys/package-d36cd264d651ec8fe646c3494c2b28bec1274450"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-1b6fda2804df1135a27deec1b79fdb8944654d14.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-1b6fda2804df1135a27deec1b79fdb8944654d14-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_1b6f_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-1b6fda2804df1135a27deec1b79fdb8944654d14"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-1b6fda2804df1135a27deec1b79fdb8944654d14.tar.gz
  netbsd_386_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: a653448b53b3b51b9335f95dea72bfb207539cf2
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-a653448b53b3b51b9335f95dea72bfb207539cf2-{{checksum ".buildcache/cache-keys/package-a653448b53b3b51b9335f95dea72bfb207539cf2"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_54d3_{{checksum ".buildcache/cache-keys/copy-source-54d3d59865a6b91a0d6f476076bf00e2edb59b06"}}
        - cache006-warm-go-build-vendor-cache_13da_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-13daa007ac837196b1cb097e80d22a332f41c42d"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-a653448b53b3b51b9335f95dea72bfb207539cf2-{{checksum ".buildcache/cache-keys/package-a653448b53b3b51b9335f95dea72bfb207539cf2"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-13daa007ac837196b1cb097e80d22a332f41c42d.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-13daa007ac837196b1cb097e80d22a332f41c42d-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_13da_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-13daa007ac837196b1cb097e80d22a332f41c42d"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-13daa007ac837196b1cb097e80d22a332f41c42d.tar.gz
  freebsd_arm_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 6d4c1bb1f543d760e07fea30a68691e887e8f1dd
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-6d4c1bb1f543d760e07fea30a68691e887e8f1dd-{{checksum ".buildcache/cache-keys/package-6d4c1bb1f543d760e07fea30a68691e887e8f1dd"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_b449_{{checksum ".buildcache/cache-keys/copy-source-b449e30e6ca8434b0e7411183531440b9daba5c2"}}
        - cache006-warm-go-build-vendor-cache_775a_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-775ac7a4157ee5ff0c89fde5e02c5e187a2db1e1"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-6d4c1bb1f543d760e07fea30a68691e887e8f1dd-{{checksum ".buildcache/cache-keys/package-6d4c1bb1f543d760e07fea30a68691e887e8f1dd"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-775ac7a4157ee5ff0c89fde5e02c5e187a2db1e1.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-775ac7a4157ee5ff0c89fde5e02c5e187a2db1e1-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_775a_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-775ac7a4157ee5ff0c89fde5e02c5e187a2db1e1"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-775ac7a4157ee5ff0c89fde5e02c5e187a2db1e1.tar.gz
  windows_amd64_package:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 5251d88e8d819c1af5e3086c5ee6d5691984f4bb
    steps:
    - setup_remote_docker:
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - c6:96:98:82:dc:04:6c:39:dd:ac:83:05:e3:15:1c:98
    - checkout
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: cache006-package-5251d88e8d819c1af5e3086c5ee6d5691984f4bb-{{checksum ".buildcache/cache-keys/package-5251d88e8d819c1af5e3086c5ee6d5691984f4bb"}}
        name: Restore package cache
    - run:
        command: |
          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check the cache status.
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        keys:
        - cache006-copy-source_be15_{{checksum ".buildcache/cache-keys/copy-source-be150dcf8267e6070894253e0369c9daa9b79482"}}
        - cache006-warm-go-build-vendor-cache_ec9a_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-ec9a0231e5fe94fd57abbb30d8d7bf9f0a6c1100"}}
        - cache006-build-static-assets_ec92_{{checksum ".buildcache/cache-keys/build-static-assets-ec92c380ceaa38acfdcf8d7ed1d765ed6f86a24b"}}
        - cache006-build-ui_f309_{{checksum ".buildcache/cache-keys/build-ui-f309c2887be9d620c0fb94d4babcc4745deb6fab"}}
        - cache006-ui-dependencies_1490_{{checksum ".buildcache/cache-keys/ui-dependencies-1490c4a5fa9891204ead666fa1e1fdc256adb0cd"}}
        - cache006-install-yarn_215c_{{checksum ".buildcache/cache-keys/install-yarn-215ccd00047a9d2cce5cdb149d71c12f47075ae8"}}
        - cache006-set-workdir_8388_{{checksum ".buildcache/cache-keys/set-workdir-8388e9e97391d59736fa011dace5ce3c3ca40814"}}
        - cache006-install-go-tools_4b19_{{checksum ".buildcache/cache-keys/install-go-tools-4b195451ff10d354581261b5ac73f6cd3473a1b9"}}
        - cache006-install-go_5930_{{checksum ".buildcache/cache-keys/install-go-5930dc1372dd850c52023131f54400cf580fc2fc"}}
        - cache006-base_cd50_{{checksum ".buildcache/cache-keys/base-cd50335c2217aa98d45d50d7ef941dfd1289b070"}}
        name: Restore build layer cache
    - run:
        command: |
          make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2

          KEYFILE="$HOME/.ssh/id_rsa_c6969882dc046c39ddac8305e3151c98"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: cache006-package-5251d88e8d819c1af5e3086c5ee6d5691984f4bb-{{checksum ".buildcache/cache-keys/package-5251d88e8d819c1af5e3086c5ee6d5691984f4bb"}}
        name: Saving package cache
        paths:
        - .buildcache/packages/store
    - run:
        command: |
          if [ -f .buildcache/archives/08-warm-go-build-vendor-cache-ec9a0231e5fe94fd57abbb30d8d7bf9f0a6c1100.tar.gz ]; then
            echo "Builder image already cached, skipping cache step."
            circleci-agent step halt
          fi
        name: Check builder cache status
    - run:
        command: make -f packages*.lock/layer.mk 08-warm-go-build-vendor-cache-ec9a0231e5fe94fd57abbb30d8d7bf9f0a6c1100-save
        name: Prepare build layers for caching
    - save_cache:
        key: cache006-warm-go-build-vendor-cache_ec9a_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-ec9a0231e5fe94fd57abbb30d8d7bf9f0a6c1100"}}
        name: Save build layer cache
        paths:
        - .buildcache/archives/08-warm-go-build-vendor-cache-ec9a0231e5fe94fd57abbb30d8d7bf9f0a6c1100.tar.gz
  pre-flight-checks:
    docker:
    - image: circleci/buildpack-deps
    environment:
    - CCI_VERSION: 0.1.5691
    shell: /usr/bin/env bash -euo pipefail
    steps:
    - checkout
    - run:
        command: |
          export CCI_PATH=/tmp/circleci-cli/$CCI_VERSION
          mkdir -p $CCI_PATH
          NAME=circleci-cli_${CCI_VERSION}_${ARCH}
          URL=$BASE/v${CCI_VERSION}/${NAME}.tar.gz
          curl -sSL $URL \
            | tar --overwrite --strip-components=1 -xz -C $CCI_PATH "${NAME}/circleci"
          # Add circleci to the path for subsequent steps.
          echo "export PATH=$CCI_PATH:\$PATH" >> $BASH_ENV
          # Done, print some debug info.
          set -x
          . $BASH_ENV
          which circleci
          circleci version
        environment:
          ARCH: linux_amd64
          BASE: https://github.com/CircleCI-Public/circleci-cli/releases/download
        name: Install CircleCI CLI
    - run:
        command: make ci-verify
  test-go-race-remote-docker:
    docker:
    - image: circleci/golang:1.15.3-stretch
    resource_class: xlarge
    working_directory: /go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
        version: 18.09.3
    - run:
        command: |
          TZ=GMT date '+%Y%m%d' > /tmp/go-cache-key
        name: Compute test cache key
    - restore_cache:
        keys:
        - go-test-cache-date-v1-{{ checksum "/tmp/go-cache-key" }}
    - run:
        command: |
          set -x

          case "-race" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0
          USE_DOCKER=1

          # Split Go tests by prior test times.  If use_docker is true, only run
          # tests that depend on docker, otherwise only those that don't.
          if [ $USE_DOCKER == 1 ]; then
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          else
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          fi

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi

            # Start a docker testcontainer to run the tests in
            docker run -d -e TEST_DOCKER_NETWORK_ID \
              -e DOCKER_CERT_PATH -e DOCKER_HOST -e DOCKER_MACHINE_NAME -e DOCKER_TLS_VERIFY -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer circleci/golang:1.14.7-stretch \
              tail -f /dev/null

            # Run tests
            test -d /tmp/go-cache && docker cp /tmp/go-cache testcontainer:/tmp/gocache
            docker exec testcontainer sh -c 'mkdir -p /go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            docker exec -w /go/src/github.com/hashicorp/vault/ \
              -e GO111MODULE -e CIRCLECI -e GOCACHE=/tmp/gocache -e VAULT_CI_GO_TEST_RACE \
              testcontainer \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                -race \
                ${package_names}
          else
            GOCACHE=/tmp/go-cache \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                -race \
                ${package_names}
          fi
        name: Run Go tests
        no_output_timeout: 60m
    - run:
        command: |
          docker cp testcontainer:/go/src/github.com/hashicorp/vault/test-results .
          docker cp testcontainer:/tmp/gocache /tmp/go-cache
        name: Copy test results
        when: always
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO111MODULE: 'off'
workflows:
  build-standalone:
    jobs:
    - build-common-layers
    - darwin_386_package:
        requires:
        - build-common-layers
    - darwin_amd64_package:
        requires:
        - build-common-layers
    - freebsd_386_package:
        requires:
        - build-common-layers
    - freebsd_amd64_package:
        requires:
        - build-common-layers
    - freebsd_arm_package:
        requires:
        - build-common-layers
    - linux_386_package:
        requires:
        - build-common-layers
    - linux_amd64_package:
        requires:
        - build-common-layers
    - linux_arm_package:
        requires:
        - build-common-layers
    - linux_arm64_package:
        requires:
        - build-common-layers
    - netbsd_386_package:
        requires:
        - build-common-layers
    - netbsd_amd64_package:
        requires:
        - build-common-layers
    - openbsd_386_package:
        requires:
        - build-common-layers
    - openbsd_amd64_package:
        requires:
        - build-common-layers
    - solaris_amd64_package:
        requires:
        - build-common-layers
    - windows_386_package:
        requires:
        - build-common-layers
    - windows_amd64_package:
        requires:
        - build-common-layers
    - bundle-releases:
        requires:
        - darwin_386_package
        - darwin_amd64_package
        - freebsd_386_package
        - freebsd_amd64_package
        - freebsd_arm_package
        - linux_386_package
        - linux_amd64_package
        - linux_arm_package
        - linux_arm64_package
        - netbsd_386_package
        - netbsd_amd64_package
        - openbsd_386_package
        - openbsd_amd64_package
        - solaris_amd64_package
        - windows_386_package
        - windows_amd64_package
  ci:
    jobs:
    - pre-flight-checks
    - install-ui-dependencies:
        requires:
        - pre-flight-checks
    - build-go-dev:
        requires:
        - pre-flight-checks
    - test-ui:
        requires:
        - install-ui-dependencies
        - build-go-dev
    - test-ui-browserstack:
        filters:
          branches:
            ignore: /pull\/[0-9]+/
        requires:
        - install-ui-dependencies
        - build-go-dev
    - test-go:
        filters:
          branches:
            ignore:
            - /^docs\/.*/
            - /^ui\/.*/
        requires:
        - pre-flight-checks
    - test-go-remote-docker:
        filters:
          branches:
            ignore:
            - /^docs\/.*/
            - /^ui\/.*/
        requires:
        - pre-flight-checks
    - test-go-race:
        filters:
          branches:
            ignore:
            - /^docs\/.*/
            - /^ui\/.*/
        requires:
        - pre-flight-checks
    - test-go-race-remote-docker:
        filters:
          branches:
            ignore:
            - /^docs\/.*/
            - /^ui\/.*/
        requires:
        - pre-flight-checks
    - website-docker-image:
        filters:
          branches:
            only:
            - master
        context: vault-docs
    - algolia-index:
        filters:
          branches:
            only:
            - stable-website
        context: vault-docs
  nightly-cachebuilder:
    jobs:
    - pre-flight-checks
    - test-go-nightly
    triggers:
    - schedule:
        cron: 0 9 * * *
        filters:
          branches:
            only:
            - master
  version: 2
