### ***
### WARNING: DO NOT manually EDIT or MERGE this file, it is generated by 'make ci-config'.
### INSTEAD: Edit or merge the source in config/ then run 'make ci-config'.
### ***
# Orb 'circleci/slack@3.2.0' resolved to 'circleci/slack@3.2.0'
version: 2
jobs:
  bundle-releases:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    steps:
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-all-package-cache-keys
        name: Write all package cache keys
    - run:
        command: mkdir -p .buildcache && echo "*" > .buildcache/.gitignore
        name: Ignore .buildcache
    - restore_cache:
        key: package-1afabc2e399b8a4254b8eef2bb737faf092c40ef-{{checksum ".buildcache/cache-keys/package-1afabc2e399b8a4254b8eef2bb737faf092c40ef"}}
        name: Restore package cache
    - restore_cache:
        key: package-109659809a75542096f4018865a2270d4b7474fa-{{checksum ".buildcache/cache-keys/package-109659809a75542096f4018865a2270d4b7474fa"}}
        name: Restore package cache
    - restore_cache:
        key: package-39819b55692be0c3ec19da4b9d4b8738ec86bb70-{{checksum ".buildcache/cache-keys/package-39819b55692be0c3ec19da4b9d4b8738ec86bb70"}}
        name: Restore package cache
    - restore_cache:
        key: package-058c75236d278b426f1c34294aec8bfa8a4a4c66-{{checksum ".buildcache/cache-keys/package-058c75236d278b426f1c34294aec8bfa8a4a4c66"}}
        name: Restore package cache
    - restore_cache:
        key: package-f6f71a3293b9436ddedcf43ff755eef63546621f-{{checksum ".buildcache/cache-keys/package-f6f71a3293b9436ddedcf43ff755eef63546621f"}}
        name: Restore package cache
    - restore_cache:
        key: package-e03985c5b3e5531cc9f9b5f42b9c6cb910a6012f-{{checksum ".buildcache/cache-keys/package-e03985c5b3e5531cc9f9b5f42b9c6cb910a6012f"}}
        name: Restore package cache
    - restore_cache:
        key: package-4b937b91bc15539a0163e57819ffa9154df9dea4-{{checksum ".buildcache/cache-keys/package-4b937b91bc15539a0163e57819ffa9154df9dea4"}}
        name: Restore package cache
    - restore_cache:
        key: package-dde3cd4c8b2d8b270988d590b7ae6caeea189b9b-{{checksum ".buildcache/cache-keys/package-dde3cd4c8b2d8b270988d590b7ae6caeea189b9b"}}
        name: Restore package cache
    - restore_cache:
        key: package-e232c99dc3672539982ccc63a795a8cbffc99f97-{{checksum ".buildcache/cache-keys/package-e232c99dc3672539982ccc63a795a8cbffc99f97"}}
        name: Restore package cache
    - restore_cache:
        key: package-53107812ebc44d184d3dbbd9a1c44b11a1aedd0f-{{checksum ".buildcache/cache-keys/package-53107812ebc44d184d3dbbd9a1c44b11a1aedd0f"}}
        name: Restore package cache
    - restore_cache:
        key: package-4e78382390927ba2120d25afd915f922ffb0a2de-{{checksum ".buildcache/cache-keys/package-4e78382390927ba2120d25afd915f922ffb0a2de"}}
        name: Restore package cache
    - restore_cache:
        key: package-150207d10ab657014782e85523c030906d9f67ce-{{checksum ".buildcache/cache-keys/package-150207d10ab657014782e85523c030906d9f67ce"}}
        name: Restore package cache
    - restore_cache:
        key: package-be42ba55789b2c5c6520a618a83b9899a7f6b448-{{checksum ".buildcache/cache-keys/package-be42ba55789b2c5c6520a618a83b9899a7f6b448"}}
        name: Restore package cache
    - restore_cache:
        key: package-1906bb0cd77724609edf5cb23553e1144245cad8-{{checksum ".buildcache/cache-keys/package-1906bb0cd77724609edf5cb23553e1144245cad8"}}
        name: Restore package cache
    - restore_cache:
        key: package-6564917b9834d6291f4fdd541b9f2be5360dd940-{{checksum ".buildcache/cache-keys/package-6564917b9834d6291f4fdd541b9f2be5360dd940"}}
        name: Restore package cache
    - run:
        command: make package-meta-all
        name: Write Package Metadata
    - run:
        command: make aliases
        name: Write package aliases
    - run:
        command: ls -lahR .buildcache
        name: List Build Cache
    - run:
        command: cp packages*.lock/pkgs.yml lockfile-698ccb0770afdb0c.yml
        name: Update Lockfile Name
    - run:
        command: tar -czf packages-698ccb0770afdb0c.tar.gz .buildcache/packages lockfile-698ccb0770afdb0c.yml
        name: Create Raw Package Tarball
    - run:
        command: tar -czf meta-698ccb0770afdb0c.tar.gz .buildcache/packages/store/*.json lockfile-698ccb0770afdb0c.yml
        name: Create Metadata Tarball
    - store_artifacts:
        path: lockfile-698ccb0770afdb0c.yml
    - store_artifacts:
        path: packages-698ccb0770afdb0c.tar.gz
    - store_artifacts:
        path: meta-698ccb0770afdb0c.tar.gz
    - store_artifacts:
        path: .buildcache/packages
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
  darwin_amd64_package:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 1afabc2e399b8a4254b8eef2bb737faf092c40ef
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: package-1afabc2e399b8a4254b8eef2bb737faf092c40ef-{{checksum ".buildcache/cache-keys/package-1afabc2e399b8a4254b8eef2bb737faf092c40ef"}}
        name: Restore package cache
    - run:
        command: |2

          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check cache status
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: copy-source_aa03_{{checksum ".buildcache/cache-keys/copy-source-aa030d8dce37e2be19d6d4b08b394df1c54ddae6"}}
        keys:
        - warm-go-build-vendor-cache_880b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-880b6951fd0fa09e3f374b36a4a721b38fd75efa"}}
        - build-static-assets_06bf_{{checksum ".buildcache/cache-keys/build-static-assets-06bf739f68ae899ae97615768a46536af59a9aae"}}
        - build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Builder Image Cache: copy-source'
    - run:
        command: make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: package-1afabc2e399b8a4254b8eef2bb737faf092c40ef-{{checksum ".buildcache/cache-keys/package-1afabc2e399b8a4254b8eef2bb737faf092c40ef"}}
        name: Save package cache
        paths:
        - .buildcache/packages/store
  windows_386_package:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 1906bb0cd77724609edf5cb23553e1144245cad8
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: package-1906bb0cd77724609edf5cb23553e1144245cad8-{{checksum ".buildcache/cache-keys/package-1906bb0cd77724609edf5cb23553e1144245cad8"}}
        name: Restore package cache
    - run:
        command: |2

          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check cache status
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: copy-source_aa03_{{checksum ".buildcache/cache-keys/copy-source-aa030d8dce37e2be19d6d4b08b394df1c54ddae6"}}
        keys:
        - warm-go-build-vendor-cache_880b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-880b6951fd0fa09e3f374b36a4a721b38fd75efa"}}
        - build-static-assets_06bf_{{checksum ".buildcache/cache-keys/build-static-assets-06bf739f68ae899ae97615768a46536af59a9aae"}}
        - build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Builder Image Cache: copy-source'
    - run:
        command: make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: package-1906bb0cd77724609edf5cb23553e1144245cad8-{{checksum ".buildcache/cache-keys/package-1906bb0cd77724609edf5cb23553e1144245cad8"}}
        name: Save package cache
        paths:
        - .buildcache/packages/store
  install-ui-dependencies:
    docker:
    - image: docker.mirror.hashicorp.services/node:14-buster
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /go/src/github.com/hashicorp/vault
    steps:
    - checkout
    - restore_cache:
        key: yarn-lock-v6-{{ checksum "ui/yarn.lock" }}
    - run:
        command: |
          cd ui
          yarn install
          npm rebuild node-sass
        name: Install UI dependencies
    - save_cache:
        key: yarn-lock-v6-{{ checksum "ui/yarn.lock" }}
        paths:
        - ui/node_modules
  build-common-layers:
    machine:
      image: ubuntu-1604:202007-01
    resource_class: xlarge
    shell: /usr/bin/env bash -euo pipefail -c
    steps:
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        keys:
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Layer Cache: build-ui'
    - run:
        command: LAYER_SPEC_ID=06-build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -f packages*.lock/layer.mk 00-base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f-image
        name: Build base layer
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -f packages*.lock/layer.mk 01-install-go-24041173bb3db182ef43fbc56adf0ed684038a10-image
        name: Build install-go layer
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -f packages*.lock/layer.mk 02-install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589-image
        name: Build install-go-tools layer
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -f packages*.lock/layer.mk 03-set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797-image
        name: Build set-workdir layer
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -f packages*.lock/layer.mk 04-install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0-image
        name: Build install-yarn layer
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -f packages*.lock/layer.mk 05-ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14-image
        name: Build ui-dependencies layer
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -f packages*.lock/layer.mk 06-build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce-image
        name: Build build-ui layer
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -f packages*.lock/layer.mk 06-build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce-save
        name: Build build-ui layer
    - save_cache:
        key: build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        name: 'Save Layer Cache: build-ui'
        paths:
        - .buildcache/archives/06-build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce.tar.gz
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
  linux_arm64_package:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: dde3cd4c8b2d8b270988d590b7ae6caeea189b9b
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: package-dde3cd4c8b2d8b270988d590b7ae6caeea189b9b-{{checksum ".buildcache/cache-keys/package-dde3cd4c8b2d8b270988d590b7ae6caeea189b9b"}}
        name: Restore package cache
    - run:
        command: |2

          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check cache status
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: copy-source_aa03_{{checksum ".buildcache/cache-keys/copy-source-aa030d8dce37e2be19d6d4b08b394df1c54ddae6"}}
        keys:
        - warm-go-build-vendor-cache_880b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-880b6951fd0fa09e3f374b36a4a721b38fd75efa"}}
        - build-static-assets_06bf_{{checksum ".buildcache/cache-keys/build-static-assets-06bf739f68ae899ae97615768a46536af59a9aae"}}
        - build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Builder Image Cache: copy-source'
    - run:
        command: make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: package-dde3cd4c8b2d8b270988d590b7ae6caeea189b9b-{{checksum ".buildcache/cache-keys/package-dde3cd4c8b2d8b270988d590b7ae6caeea189b9b"}}
        name: Save package cache
        paths:
        - .buildcache/packages/store
  test-ui:
    docker:
    - image: docker.mirror.hashicorp.services/node:14-buster
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /go/src/github.com/hashicorp/vault
    resource_class: xlarge
    steps:
    - checkout
    - restore_cache:
        key: yarn-lock-v6-{{ checksum "ui/yarn.lock" }}
    - attach_workspace:
        at: .
    - run:
        command: |
          set -x

          # Install Chrome
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub \
            | apt-key add -
          echo "deb http://dl.google.com/linux/chrome/deb/ stable main" \
            | tee /etc/apt/sources.list.d/google-chrome.list
          apt-get update
          apt-get -y install google-chrome-stable
          rm /etc/apt/sources.list.d/google-chrome.list
          rm -rf /var/lib/apt/lists/* /var/cache/apt/*

          # Add ./bin to the PATH so vault binary can be run by Ember tests
          export PATH="${PWD}/bin:${PATH}"

          # Run Ember tests
          cd ui
          mkdir -p test-results/qunit
          yarn test:oss
        name: Test UI
    - store_artifacts:
        path: ui/test-results
    - store_test_results:
        path: ui/test-results
  linux_arm_package:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 4b937b91bc15539a0163e57819ffa9154df9dea4
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: package-4b937b91bc15539a0163e57819ffa9154df9dea4-{{checksum ".buildcache/cache-keys/package-4b937b91bc15539a0163e57819ffa9154df9dea4"}}
        name: Restore package cache
    - run:
        command: |2

          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check cache status
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: copy-source_aa03_{{checksum ".buildcache/cache-keys/copy-source-aa030d8dce37e2be19d6d4b08b394df1c54ddae6"}}
        keys:
        - warm-go-build-vendor-cache_880b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-880b6951fd0fa09e3f374b36a4a721b38fd75efa"}}
        - build-static-assets_06bf_{{checksum ".buildcache/cache-keys/build-static-assets-06bf739f68ae899ae97615768a46536af59a9aae"}}
        - build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Builder Image Cache: copy-source'
    - run:
        command: make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: package-4b937b91bc15539a0163e57819ffa9154df9dea4-{{checksum ".buildcache/cache-keys/package-4b937b91bc15539a0163e57819ffa9154df9dea4"}}
        name: Save package cache
        paths:
        - .buildcache/packages/store
  test-ui-browserstack:
    docker:
    - image: docker.mirror.hashicorp.services/node:14-buster
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /go/src/github.com/hashicorp/vault
    resource_class: xlarge
    steps:
    - checkout
    - restore_cache:
        key: yarn-lock-v6-{{ checksum "ui/yarn.lock" }}
    - attach_workspace:
        at: .
    - run:
        command: |
          # Add ./bin to the PATH so vault binary can be found.
          export PATH="${PWD}"/bin:${PATH}
          make test-ui-browserstack
        name: Run Browserstack Tests
  build-go-dev:
    machine: true
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /go/src/github.com/hashicorp/vault
    steps:
    - run:
        command: |
          [ -n "$GO_VERSION" ] || { echo "You must set GO_VERSION"; exit 1; }
          # Install Go
          curl -sSLO "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz"
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz"
          rm -f "go${GO_VERSION}.linux-amd64.tar.gz"
          GOPATH="/go"
          mkdir $GOPATH 2>/dev/null || { sudo mkdir $GOPATH && sudo chmod 777 $GOPATH; }
          echo "export GOPATH='$GOPATH'" >> "$BASH_ENV"
          echo "export PATH='$PATH:$GOPATH/bin:/usr/local/go/bin'" >> "$BASH_ENV"

          echo "$ go version"
          go version
        name: Setup Go
        working_directory: ~/
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: |
          # Move dev UI assets to expected location
          rm -rf ./pkg
          mkdir ./pkg

          # Build dev binary
          make ci-bootstrap dev
        name: Build dev binary
    - persist_to_workspace:
        paths:
        - bin
        root: .
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO_VERSION: 1.15.15
    - GO111MODULE: 'off'
    - GOTESTSUM_VERSION: 0.5.2
  algolia-index:
    docker:
    - image: node:12
    steps:
    - checkout
    - run:
        command: |
          if  [ "$CIRCLE_REPOSITORY_URL" != "git@github.com:hashicorp/vault.git" ]; then
            echo "Not Vault OSS Repo, not indexing Algolia"
            exit 0
          fi
          cd website/
          npm install
          node scripts/index_search_content.js
        name: Push content to Algolia Index
  linux_386_package:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: f6f71a3293b9436ddedcf43ff755eef63546621f
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: package-f6f71a3293b9436ddedcf43ff755eef63546621f-{{checksum ".buildcache/cache-keys/package-f6f71a3293b9436ddedcf43ff755eef63546621f"}}
        name: Restore package cache
    - run:
        command: |2

          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check cache status
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: copy-source_aa03_{{checksum ".buildcache/cache-keys/copy-source-aa030d8dce37e2be19d6d4b08b394df1c54ddae6"}}
        keys:
        - warm-go-build-vendor-cache_880b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-880b6951fd0fa09e3f374b36a4a721b38fd75efa"}}
        - build-static-assets_06bf_{{checksum ".buildcache/cache-keys/build-static-assets-06bf739f68ae899ae97615768a46536af59a9aae"}}
        - build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Builder Image Cache: copy-source'
    - run:
        command: make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: package-f6f71a3293b9436ddedcf43ff755eef63546621f-{{checksum ".buildcache/cache-keys/package-f6f71a3293b9436ddedcf43ff755eef63546621f"}}
        name: Save package cache
        paths:
        - .buildcache/packages/store
  test-go-remote-docker:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/golang:1.15.15-buster
    resource_class: medium
    working_directory: /go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
        version: 18.09.3
    - run:
        command: |
          set -x

          case "" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0
          USE_DOCKER=1

          # Split Go tests by prior test times.  If use_docker is true, only run
          # tests that depend on docker, otherwise only those that don't.
          if [ $USE_DOCKER == 1 ]; then
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          else
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          fi

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi

            # Start a docker testcontainer to run the tests in
            docker run -d -e TEST_DOCKER_NETWORK_ID \
              -e DOCKER_CERT_PATH -e DOCKER_HOST -e DOCKER_MACHINE_NAME -e DOCKER_TLS_VERIFY -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer circleci/golang:1.15.15-buster \
              tail -f /dev/null

            # Run tests
            docker exec testcontainer sh -c 'mkdir -p /go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            docker exec -w /go/src/github.com/hashicorp/vault/ \
              -e GO111MODULE -e CIRCLECI -e VAULT_CI_GO_TEST_RACE \
              testcontainer \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${package_names}
          else
            gotestsum --format=short-verbose \
              --junitfile test-results/go-test/results.xml \
              --jsonfile test-results/go-test/results.json \
              -- \
              -tags "${GO_TAGS}" \
              -timeout=60m \
              -parallel=20 \
               \
              ${package_names}
          fi
        name: Run Go tests
        no_output_timeout: 60m
    - run:
        command: |
          docker cp testcontainer:/go/src/github.com/hashicorp/vault/test-results .
        name: Copy test results
        when: always
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO111MODULE: 'off'
  freebsd_386_package:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 109659809a75542096f4018865a2270d4b7474fa
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: package-109659809a75542096f4018865a2270d4b7474fa-{{checksum ".buildcache/cache-keys/package-109659809a75542096f4018865a2270d4b7474fa"}}
        name: Restore package cache
    - run:
        command: |2

          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check cache status
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: copy-source_aa03_{{checksum ".buildcache/cache-keys/copy-source-aa030d8dce37e2be19d6d4b08b394df1c54ddae6"}}
        keys:
        - warm-go-build-vendor-cache_880b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-880b6951fd0fa09e3f374b36a4a721b38fd75efa"}}
        - build-static-assets_06bf_{{checksum ".buildcache/cache-keys/build-static-assets-06bf739f68ae899ae97615768a46536af59a9aae"}}
        - build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Builder Image Cache: copy-source'
    - run:
        command: make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: package-109659809a75542096f4018865a2270d4b7474fa-{{checksum ".buildcache/cache-keys/package-109659809a75542096f4018865a2270d4b7474fa"}}
        name: Save package cache
        paths:
        - .buildcache/packages/store
  test-go-race:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/golang:1.15.15-buster
    resource_class: xlarge
    working_directory: /go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - run:
        command: |
          set -x

          case "-race" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0

          # Split Go tests by prior test times.  If use_docker is true, only run
          # tests that depend on docker, otherwise only those that don't.
          if [ $USE_DOCKER == 1 ]; then
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          else
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          fi

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi

            # Start a docker testcontainer to run the tests in
            docker run -d -e TEST_DOCKER_NETWORK_ID \
              -e DOCKER_CERT_PATH -e DOCKER_HOST -e DOCKER_MACHINE_NAME -e DOCKER_TLS_VERIFY -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer circleci/golang:1.15.15-buster \
              tail -f /dev/null

            # Run tests
            docker exec testcontainer sh -c 'mkdir -p /go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            docker exec -w /go/src/github.com/hashicorp/vault/ \
              -e GO111MODULE -e CIRCLECI -e VAULT_CI_GO_TEST_RACE \
              testcontainer \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                -race \
                ${package_names}
          else
            gotestsum --format=short-verbose \
              --junitfile test-results/go-test/results.xml \
              --jsonfile test-results/go-test/results.json \
              -- \
              -tags "${GO_TAGS}" \
              -timeout=60m \
              -parallel=20 \
              -race \
              ${package_names}
          fi
        name: Run Go tests
        no_output_timeout: 60m
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO111MODULE: 'off'
  freebsd_amd64_package:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 39819b55692be0c3ec19da4b9d4b8738ec86bb70
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: package-39819b55692be0c3ec19da4b9d4b8738ec86bb70-{{checksum ".buildcache/cache-keys/package-39819b55692be0c3ec19da4b9d4b8738ec86bb70"}}
        name: Restore package cache
    - run:
        command: |2

          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check cache status
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: copy-source_aa03_{{checksum ".buildcache/cache-keys/copy-source-aa030d8dce37e2be19d6d4b08b394df1c54ddae6"}}
        keys:
        - warm-go-build-vendor-cache_880b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-880b6951fd0fa09e3f374b36a4a721b38fd75efa"}}
        - build-static-assets_06bf_{{checksum ".buildcache/cache-keys/build-static-assets-06bf739f68ae899ae97615768a46536af59a9aae"}}
        - build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Builder Image Cache: copy-source'
    - run:
        command: make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: package-39819b55692be0c3ec19da4b9d4b8738ec86bb70-{{checksum ".buildcache/cache-keys/package-39819b55692be0c3ec19da4b9d4b8738ec86bb70"}}
        name: Save package cache
        paths:
        - .buildcache/packages/store
  openbsd_386_package:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 4e78382390927ba2120d25afd915f922ffb0a2de
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: package-4e78382390927ba2120d25afd915f922ffb0a2de-{{checksum ".buildcache/cache-keys/package-4e78382390927ba2120d25afd915f922ffb0a2de"}}
        name: Restore package cache
    - run:
        command: |2

          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check cache status
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: copy-source_aa03_{{checksum ".buildcache/cache-keys/copy-source-aa030d8dce37e2be19d6d4b08b394df1c54ddae6"}}
        keys:
        - warm-go-build-vendor-cache_880b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-880b6951fd0fa09e3f374b36a4a721b38fd75efa"}}
        - build-static-assets_06bf_{{checksum ".buildcache/cache-keys/build-static-assets-06bf739f68ae899ae97615768a46536af59a9aae"}}
        - build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Builder Image Cache: copy-source'
    - run:
        command: make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: package-4e78382390927ba2120d25afd915f922ffb0a2de-{{checksum ".buildcache/cache-keys/package-4e78382390927ba2120d25afd915f922ffb0a2de"}}
        name: Save package cache
        paths:
        - .buildcache/packages/store
  linux_amd64_package:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: e03985c5b3e5531cc9f9b5f42b9c6cb910a6012f
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: package-e03985c5b3e5531cc9f9b5f42b9c6cb910a6012f-{{checksum ".buildcache/cache-keys/package-e03985c5b3e5531cc9f9b5f42b9c6cb910a6012f"}}
        name: Restore package cache
    - run:
        command: |2

          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check cache status
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: copy-source_aa03_{{checksum ".buildcache/cache-keys/copy-source-aa030d8dce37e2be19d6d4b08b394df1c54ddae6"}}
        keys:
        - warm-go-build-vendor-cache_880b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-880b6951fd0fa09e3f374b36a4a721b38fd75efa"}}
        - build-static-assets_06bf_{{checksum ".buildcache/cache-keys/build-static-assets-06bf739f68ae899ae97615768a46536af59a9aae"}}
        - build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Builder Image Cache: copy-source'
    - run:
        command: make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: package-e03985c5b3e5531cc9f9b5f42b9c6cb910a6012f-{{checksum ".buildcache/cache-keys/package-e03985c5b3e5531cc9f9b5f42b9c6cb910a6012f"}}
        name: Save package cache
        paths:
        - .buildcache/packages/store
  website-docker-image:
    docker:
    - image: circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    steps:
    - checkout
    - setup_remote_docker
    - run:
        command: |
          IMAGE_TAG="$(git rev-list -n1 HEAD -- website/Dockerfile website/package-lock.json)"
          echo "Using $IMAGE_TAG"
          if  [ "$CIRCLE_REPOSITORY_URL" != "git@github.com:hashicorp/vault.git" ]; then
            echo "Not Vault OSS Repo, not building website docker image"
          elif curl https://hub.docker.com/v2/repositories/hashicorp/vault-website/tags/$IMAGE_TAG -fsL > /dev/null; then
              echo "Dependencies have not changed, not building a new website docker image."
          else
              cd website/
              docker build -t hashicorp/vault-website:$IMAGE_TAG .
              docker tag hashicorp/vault-website:$IMAGE_TAG hashicorp/vault-website:latest
              docker login -u $WEBSITE_DOCKER_USER -p $WEBSITE_DOCKER_PASS
              docker push hashicorp/vault-website
          fi
        name: Build Docker Image if Necessary
  solaris_amd64_package:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: be42ba55789b2c5c6520a618a83b9899a7f6b448
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: package-be42ba55789b2c5c6520a618a83b9899a7f6b448-{{checksum ".buildcache/cache-keys/package-be42ba55789b2c5c6520a618a83b9899a7f6b448"}}
        name: Restore package cache
    - run:
        command: |2

          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check cache status
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: copy-source_aa03_{{checksum ".buildcache/cache-keys/copy-source-aa030d8dce37e2be19d6d4b08b394df1c54ddae6"}}
        keys:
        - warm-go-build-vendor-cache_880b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-880b6951fd0fa09e3f374b36a4a721b38fd75efa"}}
        - build-static-assets_06bf_{{checksum ".buildcache/cache-keys/build-static-assets-06bf739f68ae899ae97615768a46536af59a9aae"}}
        - build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Builder Image Cache: copy-source'
    - run:
        command: make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: package-be42ba55789b2c5c6520a618a83b9899a7f6b448-{{checksum ".buildcache/cache-keys/package-be42ba55789b2c5c6520a618a83b9899a7f6b448"}}
        name: Save package cache
        paths:
        - .buildcache/packages/store
  test-go:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/golang:1.15.15-buster
    resource_class: large
    working_directory: /go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - run:
        command: |
          set -x

          case "" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0

          # Split Go tests by prior test times.  If use_docker is true, only run
          # tests that depend on docker, otherwise only those that don't.
          if [ $USE_DOCKER == 1 ]; then
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          else
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          fi

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi

            # Start a docker testcontainer to run the tests in
            docker run -d -e TEST_DOCKER_NETWORK_ID \
              -e DOCKER_CERT_PATH -e DOCKER_HOST -e DOCKER_MACHINE_NAME -e DOCKER_TLS_VERIFY -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer circleci/golang:1.15.15-buster \
              tail -f /dev/null

            # Run tests
            docker exec testcontainer sh -c 'mkdir -p /go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            docker exec -w /go/src/github.com/hashicorp/vault/ \
              -e GO111MODULE -e CIRCLECI -e VAULT_CI_GO_TEST_RACE \
              testcontainer \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                 \
                ${package_names}
          else
            gotestsum --format=short-verbose \
              --junitfile test-results/go-test/results.xml \
              --jsonfile test-results/go-test/results.json \
              -- \
              -tags "${GO_TAGS}" \
              -timeout=60m \
              -parallel=20 \
               \
              ${package_names}
          fi
        name: Run Go tests
        no_output_timeout: 60m
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO111MODULE: 'off'
  netbsd_amd64_package:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 53107812ebc44d184d3dbbd9a1c44b11a1aedd0f
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: package-53107812ebc44d184d3dbbd9a1c44b11a1aedd0f-{{checksum ".buildcache/cache-keys/package-53107812ebc44d184d3dbbd9a1c44b11a1aedd0f"}}
        name: Restore package cache
    - run:
        command: |2

          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check cache status
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: copy-source_aa03_{{checksum ".buildcache/cache-keys/copy-source-aa030d8dce37e2be19d6d4b08b394df1c54ddae6"}}
        keys:
        - warm-go-build-vendor-cache_880b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-880b6951fd0fa09e3f374b36a4a721b38fd75efa"}}
        - build-static-assets_06bf_{{checksum ".buildcache/cache-keys/build-static-assets-06bf739f68ae899ae97615768a46536af59a9aae"}}
        - build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Builder Image Cache: copy-source'
    - run:
        command: make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: package-53107812ebc44d184d3dbbd9a1c44b11a1aedd0f-{{checksum ".buildcache/cache-keys/package-53107812ebc44d184d3dbbd9a1c44b11a1aedd0f"}}
        name: Save package cache
        paths:
        - .buildcache/packages/store
  openbsd_amd64_package:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 150207d10ab657014782e85523c030906d9f67ce
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: package-150207d10ab657014782e85523c030906d9f67ce-{{checksum ".buildcache/cache-keys/package-150207d10ab657014782e85523c030906d9f67ce"}}
        name: Restore package cache
    - run:
        command: |2

          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check cache status
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: copy-source_aa03_{{checksum ".buildcache/cache-keys/copy-source-aa030d8dce37e2be19d6d4b08b394df1c54ddae6"}}
        keys:
        - warm-go-build-vendor-cache_880b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-880b6951fd0fa09e3f374b36a4a721b38fd75efa"}}
        - build-static-assets_06bf_{{checksum ".buildcache/cache-keys/build-static-assets-06bf739f68ae899ae97615768a46536af59a9aae"}}
        - build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Builder Image Cache: copy-source'
    - run:
        command: make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: package-150207d10ab657014782e85523c030906d9f67ce-{{checksum ".buildcache/cache-keys/package-150207d10ab657014782e85523c030906d9f67ce"}}
        name: Save package cache
        paths:
        - .buildcache/packages/store
  netbsd_386_package:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: e232c99dc3672539982ccc63a795a8cbffc99f97
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: package-e232c99dc3672539982ccc63a795a8cbffc99f97-{{checksum ".buildcache/cache-keys/package-e232c99dc3672539982ccc63a795a8cbffc99f97"}}
        name: Restore package cache
    - run:
        command: |2

          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check cache status
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: copy-source_aa03_{{checksum ".buildcache/cache-keys/copy-source-aa030d8dce37e2be19d6d4b08b394df1c54ddae6"}}
        keys:
        - warm-go-build-vendor-cache_880b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-880b6951fd0fa09e3f374b36a4a721b38fd75efa"}}
        - build-static-assets_06bf_{{checksum ".buildcache/cache-keys/build-static-assets-06bf739f68ae899ae97615768a46536af59a9aae"}}
        - build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Builder Image Cache: copy-source'
    - run:
        command: make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: package-e232c99dc3672539982ccc63a795a8cbffc99f97-{{checksum ".buildcache/cache-keys/package-e232c99dc3672539982ccc63a795a8cbffc99f97"}}
        name: Save package cache
        paths:
        - .buildcache/packages/store
  freebsd_arm_package:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 058c75236d278b426f1c34294aec8bfa8a4a4c66
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: package-058c75236d278b426f1c34294aec8bfa8a4a4c66-{{checksum ".buildcache/cache-keys/package-058c75236d278b426f1c34294aec8bfa8a4a4c66"}}
        name: Restore package cache
    - run:
        command: |2

          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check cache status
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: copy-source_aa03_{{checksum ".buildcache/cache-keys/copy-source-aa030d8dce37e2be19d6d4b08b394df1c54ddae6"}}
        keys:
        - warm-go-build-vendor-cache_880b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-880b6951fd0fa09e3f374b36a4a721b38fd75efa"}}
        - build-static-assets_06bf_{{checksum ".buildcache/cache-keys/build-static-assets-06bf739f68ae899ae97615768a46536af59a9aae"}}
        - build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Builder Image Cache: copy-source'
    - run:
        command: make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: package-058c75236d278b426f1c34294aec8bfa8a4a4c66-{{checksum ".buildcache/cache-keys/package-058c75236d278b426f1c34294aec8bfa8a4a4c66"}}
        name: Save package cache
        paths:
        - .buildcache/packages/store
  windows_amd64_package:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/buildpack-deps
    shell: /usr/bin/env bash -euo pipefail -c
    environment:
    - AUTO_INSTALL_TOOLS: 'YES'
    - BUILDKIT_PROGRESS: plain
    - PRODUCT_REVISION: ''
    - PACKAGE_SPEC_ID: 6564917b9834d6291f4fdd541b9f2be5360dd940
    steps:
    - setup_remote_docker:
        docker_layer_caching: false
        version: 19.03.12
    - add_ssh_keys:
        fingerprints:
        - 0e:03:77:f4:e2:c3:56:c2:53:6a:03:e1:31:91:2f:06
    - checkout:
        path: .
    - run:
        command: make -C packages*.lock write-package-cache-key
        name: Write package cache key
    - restore_cache:
        key: package-6564917b9834d6291f4fdd541b9f2be5360dd940-{{checksum ".buildcache/cache-keys/package-6564917b9834d6291f4fdd541b9f2be5360dd940"}}
        name: Restore package cache
    - run:
        command: |2

          if ! { PKG=$(find .buildcache/packages/store -maxdepth 1 -mindepth 1 -name '*.zip' 2> /dev/null) && [ -n "$PKG" ]; }; then
            echo "No package found, continuing with build."
            exit 0
          fi
          echo "Package already cached, skipping build."
          circleci-agent step halt
        name: Check cache status
    - run:
        command: make -C packages*.lock write-builder-cache-keys
        name: Write builder layer cache keys
    - restore_cache:
        key: copy-source_aa03_{{checksum ".buildcache/cache-keys/copy-source-aa030d8dce37e2be19d6d4b08b394df1c54ddae6"}}
        keys:
        - warm-go-build-vendor-cache_880b_{{checksum ".buildcache/cache-keys/warm-go-build-vendor-cache-880b6951fd0fa09e3f374b36a4a721b38fd75efa"}}
        - build-static-assets_06bf_{{checksum ".buildcache/cache-keys/build-static-assets-06bf739f68ae899ae97615768a46536af59a9aae"}}
        - build-ui_6ef0_{{checksum ".buildcache/cache-keys/build-ui-6ef02edae40576f9266df8eb75ba8824a25338ce"}}
        - ui-dependencies_d281_{{checksum ".buildcache/cache-keys/ui-dependencies-d2810170346a42640458a06eb4b8d2649e52cc14"}}
        - install-yarn_0412_{{checksum ".buildcache/cache-keys/install-yarn-04126f83a600281abf846ce2bba33a8fa3287ad0"}}
        - set-workdir_ac09_{{checksum ".buildcache/cache-keys/set-workdir-ac09aa713547484fe6e0b8853bec229bfc009797"}}
        - install-go-tools_af77_{{checksum ".buildcache/cache-keys/install-go-tools-af775ebfc4b4694d16eb189a289019ca91afa589"}}
        - install-go_2404_{{checksum ".buildcache/cache-keys/install-go-24041173bb3db182ef43fbc56adf0ed684038a10"}}
        - base_fc1f_{{checksum ".buildcache/cache-keys/base-fc1fa0c0d0643b393dfc77cbd78580b60fc4366f"}}
        name: 'Restore Builder Image Cache: copy-source'
    - run:
        command: make -C packages*.lock load-builder-cache
        name: Load whatever builder cache we have (if any) into the Docker daemon
        no_output_timeout: 30m
    - run:
        command: |2-

          KEYFILE="$HOME/.ssh/id_rsa_0e0377f4e2c356c2536a03e131912f06"
          eval "$(ssh-agent -s)"
          if [ -f "$KEYFILE" ]; then
            ssh-add "$KEYFILE"
          else
            echo "==> INFO: SSH key for github.com not found"
            echo "    Attempts to access private repositories from within"
            echo "    the build will fail, e.g. for private go modules, or"
            echo "    attempts to directly clone private repositories."
          fi

          make -C packages*.lock package
        name: Compile Package
    - run:
        command: ls -lahR .buildcache/packages
        name: List packages
    - save_cache:
        key: package-6564917b9834d6291f4fdd541b9f2be5360dd940-{{checksum ".buildcache/cache-keys/package-6564917b9834d6291f4fdd541b9f2be5360dd940"}}
        name: Save package cache
        paths:
        - .buildcache/packages/store
  pre-flight-checks:
    docker:
    - image: circleci/buildpack-deps
    environment:
    - CCI_VERSION: 0.1.5691
    shell: /usr/bin/env bash -euo pipefail
    steps:
    - checkout
    - run:
        command: |
          export CCI_PATH=/tmp/circleci-cli/$CCI_VERSION
          mkdir -p $CCI_PATH
          NAME=circleci-cli_${CCI_VERSION}_${ARCH}
          URL=$BASE/v${CCI_VERSION}/${NAME}.tar.gz
          curl -sSL $URL \
            | tar --overwrite --strip-components=1 -xz -C $CCI_PATH "${NAME}/circleci"
          # Add circleci to the path for subsequent steps.
          echo "export PATH=$CCI_PATH:\$PATH" >> $BASH_ENV
          # Done, print some debug info.
          set -x
          . $BASH_ENV
          which circleci
          circleci version
        environment:
          ARCH: linux_amd64
          BASE: https://github.com/CircleCI-Public/circleci-cli/releases/download
        name: Install CircleCI CLI
    - run:
        command: make ci-verify
  go-mod-vendor:
    machine: true
    shell: /usr/bin/env bash -euo pipefail -c
    working_directory: /go/src/github.com/hashicorp/vault
    steps:
    - run:
        command: |
          [ -n "$GO_VERSION" ] || { echo "You must set GO_VERSION"; exit 1; }
          # Install Go
          curl -sSLO "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz"
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf "go${GO_VERSION}.linux-amd64.tar.gz"
          rm -f "go${GO_VERSION}.linux-amd64.tar.gz"
          GOPATH="/go"
          mkdir $GOPATH 2>/dev/null || { sudo mkdir $GOPATH && sudo chmod 777 $GOPATH; }
          echo "export GOPATH='$GOPATH'" >> "$BASH_ENV"
          echo "export PATH='$PATH:$GOPATH/bin:/usr/local/go/bin'" >> "$BASH_ENV"

          echo "$ go version"
          go version
        name: Setup Go
        working_directory: ~/
    - checkout
    - attach_workspace:
        at: .
    - run:
        command: |
          GO111MODULE=on go mod vendor
          git diff --exit-code
        name: Run go mod vendor
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO_VERSION: 1.15.15
    - GO111MODULE: 'off'
    - GOTESTSUM_VERSION: 0.5.2
  test-go-race-remote-docker:
    docker:
    - image: docker.mirror.hashicorp.services/circleci/golang:1.15.15-buster
    resource_class: medium
    working_directory: /go/src/github.com/hashicorp/vault
    parallelism: 8
    steps:
    - run:
        command: |
          # If the branch being tested starts with ui/ or docs/ we want to exit the job without failing
          [[ "$CIRCLE_BRANCH" = ui/* || "$CIRCLE_BRANCH" = docs/* ]] && {
            # stop the job from this step
            circleci-agent step halt
          }
          # exit with success either way
          exit 0
        name: Check branch name
        working_directory: ~/
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
        version: 18.09.3
    - run:
        command: |
          set -x

          case "-race" in
          *-race*) export VAULT_CI_GO_TEST_RACE=1;;
          esac

          # Install CircleCI CLI
          curl -sSL \
              "https://github.com/CircleCI-Public/circleci-cli/releases/download/v${CIRCLECI_CLI_VERSION}/circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64.tar.gz" \
            | sudo tar --overwrite -xz \
              -C /usr/local/bin \
              "circleci-cli_${CIRCLECI_CLI_VERSION}_linux_amd64/circleci"

          USE_DOCKER=0
          USE_DOCKER=1

          # Split Go tests by prior test times.  If use_docker is true, only run
          # tests that depend on docker, otherwise only those that don't.
          if [ $USE_DOCKER == 1 ]; then
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(any(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker"))) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          else
            package_names=$(go list -test -json ./... |
              jq -r 'select(.Deps != null) |
                select(all(.Deps[] ; contains("github.com/hashicorp/vault/helper/testhelpers/docker")|not)) |
                .ForTest | select(. != null)' |
                sort -u | circleci tests split --split-by=timings --timings-type=classname)
          fi

          # After running tests split step, we are now running the following steps
          # in multiple different containers, each getting a different subset of
          # the test packages in their package_names variable.  Each container
          # has its own remote docker VM.

          make prep
          mkdir -p test-results/go-test

          # Create a docker network for our testcontainer
          if [ $USE_DOCKER == 1 ]; then
            # Despite the fact that we're using a circleci image (thus getting the
            # version they chose for the docker cli) and that we're specifying a
            # docker version to use for the remote docker instances, we occasionally
            # see "client version too new, max supported version 1.39" errors for
            # reasons unclear.
            export DOCKER_API_VERSION=1.39

            export TEST_DOCKER_NETWORK_ID=$(docker network list -q -f 'name=vaulttest')
            if [ -z $TEST_DOCKER_NETWORK_ID ]; then
              TEST_DOCKER_NETWORK_ID=$(docker network create vaulttest)
            fi

            # Start a docker testcontainer to run the tests in
            docker run -d -e TEST_DOCKER_NETWORK_ID \
              -e DOCKER_CERT_PATH -e DOCKER_HOST -e DOCKER_MACHINE_NAME -e DOCKER_TLS_VERIFY -e NO_PROXY \
              -e VAULT_TEST_LOG_DIR=/tmp/testlogs \
              --network vaulttest --name \
              testcontainer circleci/golang:1.15.15-buster \
              tail -f /dev/null

            # Run tests
            docker exec testcontainer sh -c 'mkdir -p /go/src/github.com/hashicorp/vault'
            docker cp . testcontainer:/go/src/github.com/hashicorp/vault/
            docker cp $DOCKER_CERT_PATH/ testcontainer:$DOCKER_CERT_PATH

            docker exec -w /go/src/github.com/hashicorp/vault/ \
              -e GO111MODULE -e CIRCLECI -e VAULT_CI_GO_TEST_RACE \
              testcontainer \
              gotestsum --format=short-verbose \
                --junitfile test-results/go-test/results.xml \
                --jsonfile test-results/go-test/results.json \
                -- \
                -tags "${GO_TAGS}" \
                -timeout=60m \
                -parallel=20 \
                -race \
                ${package_names}
          else
            gotestsum --format=short-verbose \
              --junitfile test-results/go-test/results.xml \
              --jsonfile test-results/go-test/results.json \
              -- \
              -tags "${GO_TAGS}" \
              -timeout=60m \
              -parallel=20 \
              -race \
              ${package_names}
          fi
        name: Run Go tests
        no_output_timeout: 60m
    - run:
        command: |
          docker cp testcontainer:/go/src/github.com/hashicorp/vault/test-results .
        name: Copy test results
        when: always
    - store_artifacts:
        path: test-results
    - store_test_results:
        path: test-results
    - store_artifacts:
        path: /tmp/testlogs
    environment:
    - CIRCLECI_CLI_VERSION: 0.1.5546
    - GO_TAGS: ''
    - GO111MODULE: 'off'
workflows:
  build-698ccb0770afdb0c:
    jobs:
    - build-common-layers
    - darwin_amd64_package:
        requires:
        - build-common-layers
    - bundle-releases:
        requires:
        - darwin_amd64_package
        - freebsd_386_package
        - freebsd_amd64_package
        - freebsd_arm_package
        - linux_386_package
        - linux_amd64_package
        - linux_arm_package
        - linux_arm64_package
        - netbsd_386_package
        - netbsd_amd64_package
        - openbsd_386_package
        - openbsd_amd64_package
        - solaris_amd64_package
        - windows_386_package
        - windows_amd64_package
    - freebsd_386_package:
        requires:
        - build-common-layers
    - freebsd_amd64_package:
        requires:
        - build-common-layers
    - freebsd_arm_package:
        requires:
        - build-common-layers
    - linux_386_package:
        requires:
        - build-common-layers
    - linux_amd64_package:
        requires:
        - build-common-layers
    - linux_arm_package:
        requires:
        - build-common-layers
    - linux_arm64_package:
        requires:
        - build-common-layers
    - netbsd_386_package:
        requires:
        - build-common-layers
    - netbsd_amd64_package:
        requires:
        - build-common-layers
    - openbsd_386_package:
        requires:
        - build-common-layers
    - openbsd_amd64_package:
        requires:
        - build-common-layers
    - solaris_amd64_package:
        requires:
        - build-common-layers
    - windows_386_package:
        requires:
        - build-common-layers
    - windows_amd64_package:
        requires:
        - build-common-layers
  ci:
    jobs:
    - pre-flight-checks
    - install-ui-dependencies:
        requires:
        - pre-flight-checks
    - build-go-dev:
        requires:
        - pre-flight-checks
    - go-mod-vendor:
        requires:
        - pre-flight-checks
    - test-ui:
        requires:
        - install-ui-dependencies
        - build-go-dev
    - test-ui-browserstack:
        filters:
          branches:
            ignore: /pull\/[0-9]+/
        requires:
        - install-ui-dependencies
        - build-go-dev
    - test-go:
        requires:
        - pre-flight-checks
    - test-go-remote-docker:
        requires:
        - pre-flight-checks
    - test-go-race:
        filters:
          branches:
            ignore:
            - /^docs\/.*/
            - /^ui\/.*/
        requires:
        - pre-flight-checks
    - test-go-race-remote-docker:
        filters:
          branches:
            ignore:
            - /^docs\/.*/
            - /^ui\/.*/
        requires:
        - pre-flight-checks
    - website-docker-image:
        filters:
          branches:
            only:
            - master
        context: vault-docs
    - algolia-index:
        filters:
          branches:
            only:
            - stable-website
        context: vault-docs
  version: 2
