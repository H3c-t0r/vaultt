restore_yarn_cache:
  steps:
    - restore_cache:
        name: Restore yarn cache
        key: &YARN_LOCK_CACHE_KEY yarn-lock-v7-{{ checksum "ui/yarn.lock" }}
save_yarn_cache:
  steps:
    - save_cache:
        name: Save yarn cache
        key: *YARN_LOCK_CACHE_KEY
        paths:
          - ui/node_modules
# allows restoring go mod caches by incomplete prefix. This is useful when re-generating
# cache, but not when running builds and tests that require an exact match.
# TODO should we be including arch in cache key?
restore_go_mod_cache_permissive:
  steps:
    - restore_cache:
        name: Restore closest matching go modules cache
        keys:
          - &gocachekey v1.12-{{checksum "go.sum"}}-{{checksum "sdk/go.sum"}}-{{checksum "api/go.sum"}}
          -             v1.12-{{checksum "go.sum"}}-{{checksum "sdk/go.sum"}}
          -             v1.12-{{checksum "go.sum"}}
restore_go_mod_cache:
  steps:
    - restore_cache:
        name: Restore exact go modules cache
        keys:
          - *gocachekey
save_go_mod_cache:
  steps:
    - save_cache:
        name: Save go modules cache
        key: *gocachekey
        paths:
          - /home/circleci/go/pkg
          - /home/circleci/go/src
          - /home/circleci/go/bin
refresh_go_mod_cache:
  steps:
    - restore_go_mod_cache_permissive
    - run:
        name: go mod download
        command: |
          # go list ./... forces downloading some additional versions of modules that 'go mod
          # download' misses. We need this because we make use of go list itself during
          # code generation in later builds that rely on this module cache.
          go list ./...
          # try really, really, really hard to download everything
          deps=$(pwd)/deps.txt
          rm -rf $deps
          touch $deps
          for dir in $(find . -name go.mod | xargs -n 1 dirname); do
            (cd $dir; go mod graph >> $deps);
          done
          cat $deps | cut -d' ' -f1 > deps1.txt
          cat $deps | cut -d' ' -f2 > deps2.txt
          cat deps1.txt deps2.txt | sort | uniq > $deps
          rm -rf deps1.txt deps2.txt
          cat $deps | xargs go mod download || true
    - run:
        name: Verify downloading modules did not modify any files
        command: |
          git --no-pager diff --exit-code || {
            echo "ERROR: Files modified by go mod download, see above."
            exit 0 # ignore for now
          }
    - save_go_mod_cache
