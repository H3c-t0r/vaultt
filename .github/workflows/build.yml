---
name: build

on:
  workflow_dispatch:
  pull_request:
    # The default types for pull_request are [ opened, synchronize, reopened ].
    # This is insufficient for our needs, since we're skipping stuff on PRs in
    # draft mode.  By adding the ready_for_review type, when a draft pr is marked
    # ready, we run everything, including the stuff we'd have skipped up until now.
    types: [ opened, synchronize, reopened, ready_for_review ]
  push:
    branches:
      - main
      - release/**

jobs:
  product-metadata:
    # do not run build and test steps for docs changes
    # Following https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/troubleshooting-required-status-checks#handling-skipped-but-required-checks
    # we conditionally skip the build and tests for docs(website) changes
    # if: ${{ needs.verify-changes.outputs.is_docs_change == 'false' }}
    runs-on: ubuntu-latest
    outputs:
      build-date: ${{ steps.get-metadata.outputs.build-date }}
      filepath: ${{ steps.generate-metadata-file.outputs.filepath }}
      go-cache: ${{ steps.get-metadata.outputs.go-cache }}
      go-mod-cache: ${{ steps.get-metadata.outputs.go-mod-cache }}
      go-version: ${{ steps.go-version.outputs.go-version }}
      matrix-test-group: ${{ steps.get-metadata.outputs.matrix-test-group }}
      package-name: ${{ steps.get-metadata.outputs.package-name }}
      vault-revision: ${{ steps.get-metadata.outputs.vault-revision }}
      vault-ui-hash: ui-${{ steps.get-metadata.outputs.vault-ui-hash }}
      vault-version: ${{ steps.get-metadata.outputs.vault-version }}
      vault-base-version: ${{ steps.get-metadata.outputs.vault-base-version }}
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Determine Go version
        id: go-version
        run: echo "go-version=$(cat ./.go-version)" >> "$GITHUB_OUTPUT"
      - uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          go-version: ${{ steps.go-version.outputs.go-version }}
          cache: false
      - name: Get metadata
        id: get-metadata
        env:
          # MATRIX_MAX_TEST_GROUPS is required to determine the randomly selected
          # test group. It should be set to the highest test_group used in the
          # enos-run-matrices.
          MATRIX_MAX_TEST_GROUPS: 5
        run: |
          # shellcheck disable=SC2129
          echo "build-date=$(make ci-get-date)" >> "$GITHUB_OUTPUT"
          echo "go-cache=$(go env GOCACHE)" >> "$GITHUB_OUTPUT"
          echo "go-mod-cache=$(go env GOMODCACHE)" >> "$GITHUB_OUTPUT"
          echo "matrix-test-group=$(make ci-get-matrix-group-id)" >> "$GITHUB_OUTPUT"
          echo "package-name=vault" >> "$GITHUB_OUTPUT"
          echo "vault-base-version=$(make ci-get-version-base)" >> "$GITHUB_OUTPUT"
          echo "vault-revision=$(make ci-get-revision)" >> "$GITHUB_OUTPUT"
          echo "vault-ui-hash=$(git ls-tree HEAD ui --object-only)" >> "$GITHUB_OUTPUT"
          echo "vault-version=$(make ci-get-version)" >> "$GITHUB_OUTPUT"
      - uses: hashicorp/actions-generate-metadata@v1
        id: generate-metadata-file
        with:
          version: ${{ steps.get-metadata.outputs.vault-version }}
          product: ${{ steps.get-metadata.outputs.package-name }}
      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: metadata.json
          path: ${{ steps.generate-metadata-file.outputs.filepath }}
          if-no-files-found: error

  build-ui:
    name: UI
    needs: product-metadata
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Set up UI asset cache
        id: cache-ui-assets
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        with:
          enableCrossOsArchive: true
          lookup-only: true
          path: http/web_ui
          # Only restore the UI asset cache if we haven't modified anything in the ui directory.
          # Never do a partial restore of the web_ui if we don't get a cache hit.
          key: ${{ needs.product-metadata.outputs.vault-ui-hash }}
      - name: Set up node and yarn
        if: steps.cache-ui-assets.outputs.cache-hit != 'true'
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c # v3.6.0
        with:
          node-version-file: ui/package.json
          cache: yarn
          cache-dependency-path: ui/yarn.lock
      - name: Build UI
        if: steps.cache-ui-assets.outputs.cache-hit != 'true'
        run: make ci-build-ui

  build-linux:
    name: Linux
    needs:
      - product-metadata
      - build-ui
    strategy:
      matrix:
        goos: [linux]
        goarch: [arm64, amd64]
        runs-on:
          - "ubuntu-latest"
          - "custom-linux-small-vault-latest"
          - "custom-linux-medium-vault-latest"
          - "custom-linux-xl-vault-latest"
      fail-fast: true
    uses: ./.github/workflows/build-vault-oss.yml
    with:
      goarch: ${{ matrix.goarch }}
      goos: ${{ matrix.goos }}
      go-cache: ${{ needs.product-metadata.outputs.go-cache }}
      go-mod-cache: ${{ needs.product-metadata.outputs.go-mod-cache }}
      go-tags: ui
      go-version: ${{ needs.product-metadata.outputs.go-version }}
      package-name: ${{ needs.product-metadata.outputs.package-name }}
      runs-on: ${{ matrix.runs-on }}
      vault-ui-hash: ${{ needs.product-metadata.outputs.vault-ui-hash }}
      vault-version: ${{ needs.product-metadata.outputs.vault-version }}
    secrets: inherit
