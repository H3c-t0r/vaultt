package totp

import (
	"bytes"
	"encoding/base32"
	"encoding/base64"
	"fmt"
	"image/png"

	"github.com/hashicorp/vault/logical"
	"github.com/hashicorp/vault/logical/framework"
	otplib "github.com/pquerna/otp"
	totplib "github.com/pquerna/otp/totp"
)

func pathListRoles(b *backend) *framework.Path {
	return &framework.Path{
		Pattern: "keys/?$",

		Callbacks: map[logical.Operation]framework.OperationFunc{
			logical.ListOperation: b.pathRoleList,
		},

		HelpSynopsis:    pathRoleHelpSyn,
		HelpDescription: pathRoleHelpDesc,
	}
}

func pathRoles(b *backend) *framework.Path {
	return &framework.Path{
		Pattern: "keys/" + framework.GenericNameRegex("name"),
		Fields: map[string]*framework.FieldSchema{
			"name": {
				Type:        framework.TypeString,
				Description: "Name of the role.",
			},

			"generate": {
				Type:        framework.TypeBool,
				Default:     false,
				Description: "Determines if a key is generated by vault or another service.",
			},

			"key_size": {
				Type:        framework.TypeInt,
				Default:     20,
				Description: "Determines the size in bytes of the generated key.",
			},

			"key": {
				Type:        framework.TypeString,
				Description: "The shared master key used to generate a TOTP token.",
			},

			"issuer": {
				Type:        framework.TypeString,
				Description: `The name of the key's issuing organization.`,
			},

			"account_name": {
				Type:        framework.TypeString,
				Description: `The name of the account associated with the key.`,
			},

			"period": {
				Type:        framework.TypeInt,
				Default:     30,
				Description: `The length of time used to generate a counter for the TOTP token calculation.`,
			},

			"algorithm": {
				Type:        framework.TypeString,
				Default:     "SHA1",
				Description: `The hashing algorithm used to generate the TOTP token.`,
			},

			"digits": {
				Type:        framework.TypeInt,
				Default:     6,
				Description: `The number of digits in the generated TOTP token.`,
			},

			"skew": {
				Type:        framework.TypeInt,
				Default:     0,
				Description: `The number of delay periods that are allowed when validating a TOTP token.`,
			},

			"qr_size": {
				Type:        framework.TypeInt,
				Default:     200,
				Description: `The pixel size of the generated square QR code.`,
			},
		},

		Callbacks: map[logical.Operation]framework.OperationFunc{
			logical.ReadOperation:   b.pathRoleRead,
			logical.UpdateOperation: b.pathRoleCreate,
			logical.DeleteOperation: b.pathRoleDelete,
		},

		HelpSynopsis:    pathRoleHelpSyn,
		HelpDescription: pathRoleHelpDesc,
	}
}

func (b *backend) Role(s logical.Storage, n string) (*roleEntry, error) {
	entry, err := s.Get("key/" + n)
	if err != nil {
		return nil, err
	}
	if entry == nil {
		return nil, nil
	}

	var result roleEntry
	if err := entry.DecodeJSON(&result); err != nil {
		return nil, err
	}

	return &result, nil
}

func (b *backend) pathRoleDelete(
	req *logical.Request, data *framework.FieldData) (*logical.Response, error) {
	err := req.Storage.Delete("key/" + data.Get("name").(string))
	if err != nil {
		return nil, err
	}

	return nil, nil
}

func (b *backend) pathRoleRead(
	req *logical.Request, data *framework.FieldData) (*logical.Response, error) {
	role, err := b.Role(req.Storage, data.Get("name").(string))
	if err != nil {
		return nil, err
	}
	if role == nil {
		return nil, nil
	}

	switch role.Generate {
	case true:
		key_object, err := otplib.NewKeyFromURL(role.URL)

		if err != nil {
			return logical.ErrorResponse("An error occured while generating a Key object."), nil
		}

		barcode, err := key_object.Image(role.QRSize, role.QRSize)

		if err != nil {
			return logical.ErrorResponse("An error occured while generating a QR code image."), nil
		}

		var buff bytes.Buffer
		png.Encode(&buff, barcode)
		b64Barcode := base64.StdEncoding.EncodeToString(buff.Bytes())
		return &logical.Response{
			Data: map[string]interface{}{
				"url":     key_object.String(),
				"barcode": b64Barcode,
				"skew":    role.Skew,
				"qr_size": role.QRSize,
			},
		}, nil
	default:
		// Translate algorithm back to string
		algorithm := role.Algorithm.String()

		// Return values of key
		return &logical.Response{
			Data: map[string]interface{}{
				"issuer":       role.Issuer,
				"account_name": role.AccountName,
				"period":       role.Period,
				"algorithm":    algorithm,
				"digits":       role.Digits,
			},
		}, nil
	}
}

func (b *backend) pathRoleList(
	req *logical.Request, d *framework.FieldData) (*logical.Response, error) {
	entries, err := req.Storage.List("key/")
	if err != nil {
		return nil, err
	}

	return logical.ListResponse(entries), nil
}

func (b *backend) pathRoleCreate(
	req *logical.Request, data *framework.FieldData) (*logical.Response, error) {
	name := data.Get("name").(string)
	generate := data.Get("generate").(bool)
	key_string := data.Get("key").(string)
	issuer := data.Get("issuer").(string)
	account_name := data.Get("account_name").(string)
	period := data.Get("period").(int)
	algorithm := data.Get("algorithm").(string)
	digits := data.Get("digits").(int)
	skew := data.Get("skew").(int)
	qr_size := data.Get("qr_size").(int)
	key_size := data.Get("key_size").(int)

	// Translate digits and algorithm to a format the totp library understands
	var role_digits otplib.Digits
	switch digits {
	case 6:
		role_digits = otplib.DigitsSix
	case 8:
		role_digits = otplib.DigitsEight
	default:
		return logical.ErrorResponse("The digit value can only be 6 or 8."), nil
	}

	var role_algorithm otplib.Algorithm
	switch algorithm {
	case "SHA1":
		role_algorithm = otplib.AlgorithmSHA1
	case "SHA256":
		role_algorithm = otplib.AlgorithmSHA256
	case "SHA512":
		role_algorithm = otplib.AlgorithmSHA512
	default:
		return logical.ErrorResponse("The algorithm value is not valid."), nil
	}

	// Enforce input value requirements
	if period <= 0 {
		return logical.ErrorResponse("The period value must be greater than zero."), nil
	}

	if skew < 0 {
		return logical.ErrorResponse("The skew value must be greater than zero."), nil
	}

	if qr_size <= 0 {
		return logical.ErrorResponse("The qr_size value must be greater than zero."), nil
	}

	if key_size <= 0 {
		return logical.ErrorResponse("The key_size value must be greater than zero."), nil
	}

	// If the key is generated, Account Name and Issuer are required.
	if generate {
		if account_name == "" {
			return logical.ErrorResponse("The account_name value is required for generated keys."), nil
		}

		if issuer == "" {
			return logical.ErrorResponse("The issuer value is required for generated keys."), nil
		}
	}

	// Period, Skew and Key Size need to be unsigned ints
	uint_period := uint(period)
	uint_skew := uint(skew)
	uint_key_size := uint(key_size)

	url := ""

	switch generate {
	case true:
		// Generate a new key
		key_object, err := totplib.Generate(totplib.GenerateOpts{
			Issuer:      issuer,
			AccountName: account_name,
			Period:      uint_period,
			Digits:      role_digits,
			Algorithm:   role_algorithm,
			SecretSize:  uint_key_size,
		})

		if err != nil {
			return logical.ErrorResponse("An error occured while generating a key."), nil
		}

		url = key_object.String()
		key_string = key_object.Secret()
	case false:
		if key_string == "" {
			return logical.ErrorResponse("The key value is required."), nil
		}

		_, err := base32.StdEncoding.DecodeString(key_string)

		if err != nil {
			return logical.ErrorResponse(fmt.Sprintf(
				"Invalid key value: %s", err)), nil
		}
	}

	// Store it
	entry, err := logical.StorageEntryJSON("key/"+name, &roleEntry{
		Key:         key_string,
		Issuer:      issuer,
		AccountName: account_name,
		Period:      uint_period,
		Algorithm:   role_algorithm,
		Digits:      role_digits,
		Skew:        uint_skew,
		QRSize:      qr_size,
		URL:         url,
		Generate:    generate,
	})
	if err != nil {
		return nil, err
	}
	if err := req.Storage.Put(entry); err != nil {
		return nil, err
	}

	return nil, nil
}

type roleEntry struct {
	Key         string           `json:"key" mapstructure:"key" structs:"key"`
	Issuer      string           `json:"issuer" mapstructure:"issuer" structs:"issuer"`
	AccountName string           `json:"account_name" mapstructure:"account_name" structs:"account_name"`
	Period      uint             `json:"period" mapstructure:"period" structs:"period"`
	Algorithm   otplib.Algorithm `json:"algorithm" mapstructure:"algorithm" structs:"algorithm"`
	Digits      otplib.Digits    `json:"digits" mapstructure:"digits" structs:"digits"`
	Skew        uint             `json:"skew" mapstructure:"skew" structs:"skew"`
	QRSize      int              `json:"qr_size" mapstructure:"qr_size" structs:"qr_size"`
	URL         string           `json:"url" mapstructure:"url" structs:"url"`
	Generate    bool             `json:"generate" mapstructure:"generate" structs:"generate"`
}

const pathRoleHelpSyn = `
Manage the roles that can be created with this backend.
`

const pathRoleHelpDesc = `
This path lets you manage the roles that can be created with this backend.

`
