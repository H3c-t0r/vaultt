// Code generated by protoc-gen-go.
// source: forwarded_request.proto
// DO NOT EDIT!

/*
Package forwarded_request is a generated protocol buffer package.

It is generated from these files:
	forwarded_request.proto

It has these top-level messages:
	ForwardedRequest
	URL
	HeaderEntry
*/
package forwarded_request

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ForwardedRequest struct {
	Method           string                  `protobuf:"bytes,1,opt,name=method" json:"method,omitempty"`
	Url              *URL                    `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	HeaderEntries    map[string]*HeaderEntry `protobuf:"bytes,3,rep,name=header_entries,json=headerEntries" json:"header_entries,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body             []byte                  `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Host             string                  `protobuf:"bytes,5,opt,name=host" json:"host,omitempty"`
	RemoteAddr       string                  `protobuf:"bytes,6,opt,name=remote_addr,json=remoteAddr" json:"remote_addr,omitempty"`
	PeerCertificates [][]byte                `protobuf:"bytes,7,rep,name=peer_certificates,json=peerCertificates,proto3" json:"peer_certificates,omitempty"`
}

func (m *ForwardedRequest) Reset()                    { *m = ForwardedRequest{} }
func (m *ForwardedRequest) String() string            { return proto.CompactTextString(m) }
func (*ForwardedRequest) ProtoMessage()               {}
func (*ForwardedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ForwardedRequest) GetUrl() *URL {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *ForwardedRequest) GetHeaderEntries() map[string]*HeaderEntry {
	if m != nil {
		return m.HeaderEntries
	}
	return nil
}

type URL struct {
	Scheme string `protobuf:"bytes,1,opt,name=scheme" json:"scheme,omitempty"`
	Opaque string `protobuf:"bytes,2,opt,name=opaque" json:"opaque,omitempty"`
	// This isn't needed now but might be in the future, so we'll skip the
	// number to keep the ordering in net/url
	// UserInfo user = 3;
	Host    string `protobuf:"bytes,4,opt,name=host" json:"host,omitempty"`
	Path    string `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
	RawPath string `protobuf:"bytes,6,opt,name=raw_path,json=rawPath" json:"raw_path,omitempty"`
	// This also isn't needed right now, but we'll reserve the number
	// bool force_query = 7;
	RawQuery string `protobuf:"bytes,8,opt,name=raw_query,json=rawQuery" json:"raw_query,omitempty"`
	Fragment string `protobuf:"bytes,9,opt,name=fragment" json:"fragment,omitempty"`
}

func (m *URL) Reset()                    { *m = URL{} }
func (m *URL) String() string            { return proto.CompactTextString(m) }
func (*URL) ProtoMessage()               {}
func (*URL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type HeaderEntry struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *HeaderEntry) Reset()                    { *m = HeaderEntry{} }
func (m *HeaderEntry) String() string            { return proto.CompactTextString(m) }
func (*HeaderEntry) ProtoMessage()               {}
func (*HeaderEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*ForwardedRequest)(nil), "ForwardedRequest")
	proto.RegisterType((*URL)(nil), "URL")
	proto.RegisterType((*HeaderEntry)(nil), "HeaderEntry")
}

func init() { proto.RegisterFile("forwarded_request.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x92, 0x41, 0xab, 0xd3, 0x40,
	0x14, 0x85, 0x49, 0x93, 0xd7, 0xd7, 0xdc, 0x54, 0xa9, 0xb3, 0x78, 0x8e, 0xcf, 0x85, 0x21, 0x28,
	0x04, 0x84, 0x2c, 0xea, 0x46, 0xdc, 0x89, 0x28, 0x82, 0x45, 0x74, 0xa0, 0xeb, 0x30, 0xed, 0xdc,
	0x9a, 0x62, 0xd3, 0x49, 0x6f, 0x26, 0x96, 0xfc, 0x2c, 0x7f, 0x8c, 0xff, 0x47, 0x66, 0x26, 0x91,
	0xe0, 0x5b, 0xe5, 0x9e, 0xf3, 0x5d, 0x86, 0x7b, 0x0e, 0x81, 0xa7, 0x07, 0x4d, 0x57, 0x49, 0x0a,
	0x55, 0x49, 0x78, 0xe9, 0xb0, 0x35, 0x45, 0x43, 0xda, 0xe8, 0xec, 0xcf, 0x0c, 0x56, 0x9f, 0x46,
	0x26, 0x3c, 0x62, 0x77, 0x30, 0xaf, 0xd1, 0x54, 0x5a, 0xf1, 0x20, 0x0d, 0xf2, 0x58, 0x0c, 0x8a,
	0xdd, 0x41, 0xd8, 0xd1, 0x89, 0xcf, 0xd2, 0x20, 0x4f, 0xd6, 0x51, 0xb1, 0x15, 0x1b, 0x61, 0x0d,
	0xf6, 0x05, 0x1e, 0x57, 0x28, 0x15, 0x52, 0x89, 0x67, 0x43, 0x47, 0x6c, 0x79, 0x98, 0x86, 0x79,
	0xb2, 0x7e, 0x59, 0xfc, 0xff, 0x74, 0xf1, 0xd9, 0xed, 0x7d, 0xf4, 0x6b, 0xf6, 0xd3, 0x8b, 0x47,
	0xd5, 0xd4, 0x63, 0x0c, 0xa2, 0x9d, 0x56, 0x3d, 0x8f, 0xd2, 0x20, 0x5f, 0x0a, 0x37, 0x5b, 0xaf,
	0xd2, 0xad, 0xe1, 0x37, 0xee, 0x1c, 0x37, 0xb3, 0x17, 0x90, 0x10, 0xd6, 0xda, 0x60, 0x29, 0x95,
	0x22, 0x3e, 0x77, 0x08, 0xbc, 0xf5, 0x5e, 0x29, 0x62, 0xaf, 0xe1, 0x49, 0x83, 0x48, 0xe5, 0x1e,
	0xc9, 0x1c, 0x0f, 0xc7, 0xbd, 0x34, 0xd8, 0xf2, 0xdb, 0x34, 0xcc, 0x97, 0x62, 0x65, 0xc1, 0x87,
	0x89, 0x7f, 0xff, 0x15, 0xd8, 0xc3, 0xd3, 0xd8, 0x0a, 0xc2, 0x9f, 0xd8, 0x0f, 0x2d, 0xd8, 0x91,
	0x65, 0x70, 0xf3, 0x4b, 0x9e, 0x3a, 0x1c, 0x4a, 0x58, 0x4e, 0x02, 0xf5, 0xc2, 0xa3, 0x77, 0xb3,
	0xb7, 0x41, 0xf6, 0x3b, 0x80, 0x70, 0x2b, 0x36, 0xb6, 0xca, 0x76, 0x5f, 0x61, 0x8d, 0x63, 0x95,
	0x5e, 0x59, 0x5f, 0x37, 0xf2, 0x32, 0x3c, 0x14, 0x8b, 0x41, 0xfd, 0x4b, 0x1a, 0x4d, 0x92, 0x32,
	0x88, 0x1a, 0x69, 0xaa, 0x31, 0xbd, 0x9d, 0xd9, 0x33, 0x58, 0x90, 0xbc, 0x96, 0xce, 0xf7, 0xd1,
	0x6f, 0x49, 0x5e, 0xbf, 0x59, 0xf4, 0x1c, 0x62, 0x8b, 0x2e, 0x1d, 0x52, 0xcf, 0x17, 0x8e, 0xd9,
	0xdd, 0xef, 0x56, 0xb3, 0x7b, 0x58, 0x1c, 0x48, 0xfe, 0xa8, 0xf1, 0x6c, 0x78, 0xec, 0xd9, 0xa8,
	0xb3, 0x57, 0x90, 0x4c, 0xd2, 0xd8, 0x13, 0x5d, 0x9e, 0x96, 0x07, 0x69, 0x68, 0x4f, 0xf4, 0x6a,
	0x37, 0x77, 0x7f, 0xce, 0x9b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x65, 0xbd, 0x56, 0x54,
	0x02, 0x00, 0x00,
}
