import Component from '@glimmer/component';
import { action } from '@ember/object';
import { HTMLElementEvent } from 'forms';

/**
 * @module PkiKeyParameters
 * PkiKeyParameters components are used to display a list of key bit options depending on the selected key type. The key bits field is disabled until a key type is selected.
 * If the component renders in a group, other attrs may be passed in and will be rendered using the <FormField> component
 * @example
 * ```js
 * <PkiKeyParameters @model={{@model}} @fields={{fields}}/>
 * ```
 * @param {class} model - The pki/role model.
 * @param {string} fields - Array of attributes from a formFieldGroup generated by the @withFormFields decorator
 */

interface PkiKeyParametersArgs {
  model: Model;
  fields: [{ name: string; type: any; options: {} }];
}

interface Model {
  keyType?: string;
  keyBits?: string;
}

interface Options {
  rsa: string[];
  ec: string[];
  ed25519: string[];
  any: string[];
}

// first value in array is the default bits for that key type
const KEY_BITS_OPTIONS: Options = {
  rsa: ['2048', '3072', '4096'],
  ec: ['256', '224', '384', '521'],
  ed25519: ['0'],
  any: ['0'],
};

export default class PkiKeyParameters extends Component<PkiKeyParametersArgs> {
  get keyBitOptions() {
    return KEY_BITS_OPTIONS[this.args.model.keyType as keyof Options];
  }

  @action handleSelection(name: string, selection: string) {
    console.log(selection);
    this.args.model[name as keyof Model] = selection;

    if (name === 'keyType') {
      this.args.model.keyBits = Object.keys(KEY_BITS_OPTIONS).includes(selection)
        ? KEY_BITS_OPTIONS[selection as keyof Options][0]
        : '';
    }
  }

  @action onKeyBitsChange(event: HTMLElementEvent<HTMLInputElement>) {
    const { name, value } = event.target;
    this.handleSelection(name, value);
  }
}
